
smi_lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08003958  08003958  00013958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  08003bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  7 .bss          000010fc  20000088  20000088  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20001184  20001184  00020088  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009a49  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ea3  00000000  00000000  00029afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ac0  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000988  00000000  00000000  0002c460  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003de4  00000000  00000000  0002cde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003469  00000000  00000000  00030bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00034035  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000325c  00000000  00000000  000340b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000054  00000000  00000000  00037310  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000ac  00000000  00000000  00037364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800393c 	.word	0x0800393c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	0800393c 	.word	0x0800393c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73bb      	strb	r3, [r7, #14]
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	78db      	ldrb	r3, [r3, #3]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d039      	beq.n	8000bfc <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b88:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <NVIC_Init+0xbc>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	f1c3 0304 	rsb	r3, r3, #4
 8000b9e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ba0:	7b7a      	ldrb	r2, [r7, #13]
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	fa42 f303 	asr.w	r3, r2, r3
 8000ba8:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	785b      	ldrb	r3, [r3, #1]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	789a      	ldrb	r2, [r3, #2]
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <NVIC_Init+0xc0>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <NVIC_Init+0xc0>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	f003 031f 	and.w	r3, r3, #31
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bf6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bfa:	e00f      	b.n	8000c1c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bfc:	490b      	ldr	r1, [pc, #44]	; (8000c2c <NVIC_Init+0xc0>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	f003 031f 	and.w	r3, r3, #31
 8000c10:	2201      	movs	r2, #1
 8000c12:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c14:	f100 0320 	add.w	r3, r0, #32
 8000c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c52:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <ADC_Init+0xa8>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c82:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c88:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	795b      	ldrb	r3, [r3, #5]
 8000c8e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c90:	4313      	orrs	r3, r2
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000caa:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	7d1b      	ldrb	r3, [r3, #20]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000cba:	7afb      	ldrb	r3, [r7, #11]
 8000cbc:	051b      	lsls	r3, r3, #20
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	c0fff7fd 	.word	0xc0fff7fd

08000cdc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d006      	beq.n	8000cfc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f043 0201 	orr.w	r2, r3, #1
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000cfa:	e005      	b.n	8000d08 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f023 0201 	bic.w	r2, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	609a      	str	r2, [r3, #8]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	4611      	mov	r1, r2
 8000d20:	461a      	mov	r2, r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	70fb      	strb	r3, [r7, #3]
 8000d26:	460b      	mov	r3, r1
 8000d28:	70bb      	strb	r3, [r7, #2]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	2b09      	cmp	r3, #9
 8000d3a:	d923      	bls.n	8000d84 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	f1a3 020a 	sub.w	r2, r3, #10
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2207      	movs	r2, #7
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000d60:	7879      	ldrb	r1, [r7, #1]
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	f1a3 020a 	sub.w	r2, r3, #10
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	e01e      	b.n	8000dc2 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000d8a:	78fa      	ldrb	r2, [r7, #3]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	2207      	movs	r2, #7
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000da4:	7879      	ldrb	r1, [r7, #1]
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000dc2:	78bb      	ldrb	r3, [r7, #2]
 8000dc4:	2b06      	cmp	r3, #6
 8000dc6:	d821      	bhi.n	8000e0c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dcc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000dce:	78bb      	ldrb	r3, [r7, #2]
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	221f      	movs	r2, #31
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	4013      	ands	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000dea:	78f9      	ldrb	r1, [r7, #3]
 8000dec:	78bb      	ldrb	r3, [r7, #2]
 8000dee:	1e5a      	subs	r2, r3, #1
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000e0a:	e047      	b.n	8000e9c <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000e0c:	78bb      	ldrb	r3, [r7, #2]
 8000e0e:	2b0c      	cmp	r3, #12
 8000e10:	d821      	bhi.n	8000e56 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000e18:	78bb      	ldrb	r3, [r7, #2]
 8000e1a:	1fda      	subs	r2, r3, #7
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	221f      	movs	r2, #31
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000e34:	78f9      	ldrb	r1, [r7, #3]
 8000e36:	78bb      	ldrb	r3, [r7, #2]
 8000e38:	1fda      	subs	r2, r3, #7
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000e54:	e022      	b.n	8000e9c <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000e5c:	78bb      	ldrb	r3, [r7, #2]
 8000e5e:	f1a3 020d 	sub.w	r2, r3, #13
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	221f      	movs	r2, #31
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000e7a:	78f9      	ldrb	r1, [r7, #3]
 8000e7c:	78bb      	ldrb	r3, [r7, #2]
 8000e7e:	f1a3 020d 	sub.w	r2, r3, #13
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	609a      	str	r2, [r3, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed4:	b29b      	uxth	r3, r3
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	460b      	mov	r3, r1
 8000eec:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000efe:	2301      	movs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e001      	b.n	8000f08 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <DAC_Init+0x64>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000f30:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000f50:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000f56:	4313      	orrs	r3, r2
 8000f58:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <DAC_Init+0x64>)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40007400 	.word	0x40007400

08000f80 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d009      	beq.n	8000fa6 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000f92:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <DAC_Cmd+0x48>)
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <DAC_Cmd+0x48>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	2001      	movs	r0, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	fa00 f303 	lsl.w	r3, r0, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000fa4:	e009      	b.n	8000fba <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <DAC_Cmd+0x48>)
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <DAC_Cmd+0x48>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	2001      	movs	r0, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	fa00 f303 	lsl.w	r3, r0, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40007400 	.word	0x40007400

08000fcc <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00a      	beq.n	8000ff4 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <DAC_SoftwareTriggerCmd+0x4c>)
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <DAC_SoftwareTriggerCmd+0x4c>)
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f303 	lsl.w	r3, r0, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
 8000ff2:	e00a      	b.n	800100a <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8000ff4:	4908      	ldr	r1, [pc, #32]	; (8001018 <DAC_SoftwareTriggerCmd+0x4c>)
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <DAC_SoftwareTriggerCmd+0x4c>)
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	2001      	movs	r0, #1
 8001000:	fa00 f303 	lsl.w	r3, r0, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	4013      	ands	r3, r2
 8001008:	604b      	str	r3, [r1, #4]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40007400 	.word	0x40007400

0800101c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <DAC_SetChannel1Data+0x34>)
 800102e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	3308      	adds	r3, #8
 8001038:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	461a      	mov	r2, r3
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	6013      	str	r3, [r2, #0]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40007400 	.word	0x40007400

08001054 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <EXTI_Init+0xe0>)
 8001062:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	799b      	ldrb	r3, [r3, #6]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d04f      	beq.n	800110c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800106c:	4931      	ldr	r1, [pc, #196]	; (8001134 <EXTI_Init+0xe0>)
 800106e:	4b31      	ldr	r3, [pc, #196]	; (8001134 <EXTI_Init+0xe0>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	43db      	mvns	r3, r3
 8001078:	4013      	ands	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800107c:	492d      	ldr	r1, [pc, #180]	; (8001134 <EXTI_Init+0xe0>)
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <EXTI_Init+0xe0>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	43db      	mvns	r3, r3
 8001088:	4013      	ands	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	791b      	ldrb	r3, [r3, #4]
 8001090:	461a      	mov	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	6811      	ldr	r1, [r2, #0]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80010a6:	4923      	ldr	r1, [pc, #140]	; (8001134 <EXTI_Init+0xe0>)
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <EXTI_Init+0xe0>)
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4013      	ands	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80010b6:	491f      	ldr	r1, [pc, #124]	; (8001134 <EXTI_Init+0xe0>)
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <EXTI_Init+0xe0>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4013      	ands	r3, r2
 80010c4:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	795b      	ldrb	r3, [r3, #5]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d10e      	bne.n	80010ec <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80010ce:	4919      	ldr	r1, [pc, #100]	; (8001134 <EXTI_Init+0xe0>)
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <EXTI_Init+0xe0>)
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4313      	orrs	r3, r2
 80010da:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80010dc:	4915      	ldr	r1, [pc, #84]	; (8001134 <EXTI_Init+0xe0>)
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <EXTI_Init+0xe0>)
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80010ea:	e01d      	b.n	8001128 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <EXTI_Init+0xe0>)
 80010ee:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	795b      	ldrb	r3, [r3, #5]
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	6811      	ldr	r1, [r2, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	e00d      	b.n	8001128 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	791b      	ldrb	r3, [r3, #4]
 8001110:	461a      	mov	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	6811      	ldr	r1, [r2, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	43d2      	mvns	r2, r2
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40013c00 	.word	0x40013c00

08001138 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <EXTI_GetITStatus+0x44>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4013      	ands	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <EXTI_GetITStatus+0x44>)
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <EXTI_GetITStatus+0x32>
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e001      	b.n	800116e <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40013c00 	.word	0x40013c00

08001180 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <EXTI_ClearITPendingBit+0x1c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6153      	str	r3, [r2, #20]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40013c00 	.word	0x40013c00

080011a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	e076      	b.n	80012aa <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80011bc:	2201      	movs	r2, #1
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d165      	bne.n	80012a4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2103      	movs	r1, #3
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	401a      	ands	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	4619      	mov	r1, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d003      	beq.n	8001216 <GPIO_Init+0x76>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	791b      	ldrb	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d12e      	bne.n	8001274 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2103      	movs	r1, #3
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	401a      	ands	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	795b      	ldrb	r3, [r3, #5]
 8001234:	4619      	mov	r1, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	2301      	movs	r3, #1
 8001250:	408b      	lsls	r3, r1
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	7992      	ldrb	r2, [r2, #6]
 8001262:	4611      	mov	r1, r2
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	b292      	uxth	r2, r2
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	b292      	uxth	r2, r2
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	b29b      	uxth	r3, r3
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2103      	movs	r1, #3
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	79db      	ldrb	r3, [r3, #7]
 8001294:	4619      	mov	r1, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d985      	bls.n	80011bc <GPIO_Init+0x1c>
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	831a      	strh	r2, [r3, #24]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	887a      	ldrh	r2, [r7, #2]
 80012ea:	835a      	strh	r2, [r3, #26]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800130a:	490a      	ldr	r1, [pc, #40]	; (8001334 <RCC_AHB1PeriphClockCmd+0x3c>)
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <RCC_AHB1PeriphClockCmd+0x3c>)
 800130e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4313      	orrs	r3, r2
 8001314:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001316:	e006      	b.n	8001326 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001318:	4906      	ldr	r1, [pc, #24]	; (8001334 <RCC_AHB1PeriphClockCmd+0x3c>)
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <RCC_AHB1PeriphClockCmd+0x3c>)
 800131c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	43db      	mvns	r3, r3
 8001322:	4013      	ands	r3, r2
 8001324:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800134a:	490a      	ldr	r1, [pc, #40]	; (8001374 <RCC_APB1PeriphClockCmd+0x3c>)
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <RCC_APB1PeriphClockCmd+0x3c>)
 800134e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4313      	orrs	r3, r2
 8001354:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001356:	e006      	b.n	8001366 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001358:	4906      	ldr	r1, [pc, #24]	; (8001374 <RCC_APB1PeriphClockCmd+0x3c>)
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <RCC_APB1PeriphClockCmd+0x3c>)
 800135c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	43db      	mvns	r3, r3
 8001362:	4013      	ands	r3, r2
 8001364:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800138a:	490a      	ldr	r1, [pc, #40]	; (80013b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800138e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001396:	e006      	b.n	80013a6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001398:	4906      	ldr	r1, [pc, #24]	; (80013b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800139c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4013      	ands	r3, r2
 80013a4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80013dc:	4916      	ldr	r1, [pc, #88]	; (8001438 <SYSCFG_EXTILineConfig+0x80>)
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <SYSCFG_EXTILineConfig+0x80>)
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	3302      	adds	r3, #2
 80013f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	401a      	ands	r2, r3
 80013fa:	1c83      	adds	r3, r0, #2
 80013fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <SYSCFG_EXTILineConfig+0x80>)
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461c      	mov	r4, r3
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <SYSCFG_EXTILineConfig+0x80>)
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3302      	adds	r3, #2
 8001414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001418:	79f9      	ldrb	r1, [r7, #7]
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	431a      	orrs	r2, r3
 8001428:	1ca3      	adds	r3, r4, #2
 800142a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bc90      	pop	{r4, r7}
 8001436:	4770      	bx	lr
 8001438:	40013800 	.word	0x40013800

0800143c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <TIM_TimeBaseInit+0xbc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d013      	beq.n	8001480 <TIM_TimeBaseInit+0x44>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a28      	ldr	r2, [pc, #160]	; (80014fc <TIM_TimeBaseInit+0xc0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d00f      	beq.n	8001480 <TIM_TimeBaseInit+0x44>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001466:	d00b      	beq.n	8001480 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a25      	ldr	r2, [pc, #148]	; (8001500 <TIM_TimeBaseInit+0xc4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d007      	beq.n	8001480 <TIM_TimeBaseInit+0x44>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a24      	ldr	r2, [pc, #144]	; (8001504 <TIM_TimeBaseInit+0xc8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d003      	beq.n	8001480 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a23      	ldr	r2, [pc, #140]	; (8001508 <TIM_TimeBaseInit+0xcc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d108      	bne.n	8001492 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001486:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	885a      	ldrh	r2, [r3, #2]
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	4313      	orrs	r3, r2
 8001490:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <TIM_TimeBaseInit+0xd0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00c      	beq.n	80014b4 <TIM_TimeBaseInit+0x78>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <TIM_TimeBaseInit+0xd4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d008      	beq.n	80014b4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014a8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	891a      	ldrh	r2, [r3, #8]
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	89fa      	ldrh	r2, [r7, #14]
 80014b8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <TIM_TimeBaseInit+0xbc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d003      	beq.n	80014da <TIM_TimeBaseInit+0x9e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a09      	ldr	r2, [pc, #36]	; (80014fc <TIM_TimeBaseInit+0xc0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d104      	bne.n	80014e4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	7a9b      	ldrb	r3, [r3, #10]
 80014de:	b29a      	uxth	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	829a      	strh	r2, [r3, #20]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40010000 	.word	0x40010000
 80014fc:	40010400 	.word	0x40010400
 8001500:	40000400 	.word	0x40000400
 8001504:	40000800 	.word	0x40000800
 8001508:	40000c00 	.word	0x40000c00
 800150c:	40001000 	.word	0x40001000
 8001510:	40001400 	.word	0x40001400

08001514 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	b29a      	uxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001536:	e007      	b.n	8001548 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	801a      	strh	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	899b      	ldrh	r3, [r3, #12]
 800156e:	b29a      	uxth	r2, r3
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	4313      	orrs	r3, r2
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800157a:	e009      	b.n	8001590 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	899b      	ldrh	r3, [r3, #12]
 8001580:	b29a      	uxth	r2, r3
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	43db      	mvns	r3, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	4013      	ands	r3, r2
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	819a      	strh	r2, [r3, #12]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	81bb      	strh	r3, [r7, #12]
 80015b0:	2300      	movs	r3, #0
 80015b2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	8a1b      	ldrh	r3, [r3, #16]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	4013      	ands	r3, r2
 80015be:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	899b      	ldrh	r3, [r3, #12]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	4013      	ands	r3, r2
 80015ca:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80015cc:	89bb      	ldrh	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <TIM_GetITStatus+0x42>
 80015d2:	897b      	ldrh	r3, [r7, #10]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e001      	b.n	80015e2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	43db      	mvns	r3, r3
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	821a      	strh	r2, [r3, #16]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <initBC>:

static 	BufferCirculaire myBC;


void initBC(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
	myBC.bufferSize = CIRCULAR_BUFFER_SIZE;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <initBC+0x64>)
 800161c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001620:	2215      	movs	r2, #21
 8001622:	601a      	str	r2, [r3, #0]
	myBC.tail = 0;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <initBC+0x64>)
 8001626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162a:	3304      	adds	r3, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
	myBC.head = 0;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <initBC+0x64>)
 8001632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001636:	3308      	adds	r3, #8
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
	myBC.maxHeadIndex = 0;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <initBC+0x64>)
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	330c      	adds	r3, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < myBC.bufferSize; i++)
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	e007      	b.n	800165e <initBC+0x4a>
		myBC.data[i] = 0;
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <initBC+0x64>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2100      	movs	r1, #0
 8001654:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < myBC.bufferSize; i++)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3301      	adds	r3, #1
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <initBC+0x64>)
 8001660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dcf0      	bgt.n	800164e <initBC+0x3a>
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	200000a4 	.word	0x200000a4

0800167c <writeBC>:
#endif
	return out;
}

void writeBC(int p_data)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	myBC.data[myBC.head] = p_data;
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <writeBC+0x88>)
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	3308      	adds	r3, #8
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	491d      	ldr	r1, [pc, #116]	; (8001704 <writeBC+0x88>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	myBC.maxHeadIndex = myBC.maxHeadIndex <= myBC.head ? myBC.head
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <writeBC+0x88>)
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	3308      	adds	r3, #8
 800169e:	681a      	ldr	r2, [r3, #0]
													   : myBC.maxHeadIndex;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <writeBC+0x88>)
 80016a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a6:	330c      	adds	r3, #12
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	bfb8      	it	lt
 80016ae:	461a      	movlt	r2, r3
	myBC.maxHeadIndex = myBC.maxHeadIndex <= myBC.head ? myBC.head
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <writeBC+0x88>)
 80016b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b6:	330c      	adds	r3, #12
 80016b8:	601a      	str	r2, [r3, #0]
	myBC.head++;
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <writeBC+0x88>)
 80016bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c0:	3308      	adds	r3, #8
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <writeBC+0x88>)
 80016c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016cc:	3308      	adds	r3, #8
 80016ce:	601a      	str	r2, [r3, #0]
	myBC.head %= myBC.bufferSize;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <writeBC+0x88>)
 80016d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d6:	3308      	adds	r3, #8
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <writeBC+0x88>)
 80016dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80016e6:	fb02 f201 	mul.w	r2, r2, r1
 80016ea:	1a9a      	subs	r2, r3, r2
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <writeBC+0x88>)
 80016ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f2:	3308      	adds	r3, #8
 80016f4:	601a      	str	r2, [r3, #0]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200000a4 	.word	0x200000a4

08001708 <incrementReadingTailBC>:

void incrementReadingTailBC(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	myBC.tail++;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <incrementReadingTailBC+0x4c>)
 800170e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001712:	3304      	adds	r3, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <incrementReadingTailBC+0x4c>)
 800171a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171e:	3304      	adds	r3, #4
 8001720:	601a      	str	r2, [r3, #0]
	myBC.tail %= myBC.bufferSize;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <incrementReadingTailBC+0x4c>)
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	3304      	adds	r3, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a09      	ldr	r2, [pc, #36]	; (8001754 <incrementReadingTailBC+0x4c>)
 800172e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	fb93 f1f2 	sdiv	r1, r3, r2
 8001738:	fb02 f201 	mul.w	r2, r2, r1
 800173c:	1a9a      	subs	r2, r3, r2
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <incrementReadingTailBC+0x4c>)
 8001740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001744:	3304      	adds	r3, #4
 8001746:	601a      	str	r2, [r3, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200000a4 	.word	0x200000a4

08001758 <getBCHandle>:

BufferCirculaire*	getBCHandle(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return &myBC;
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <getBCHandle+0x10>)
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	200000a4 	.word	0x200000a4

0800176c <init_adc>:
#include <adc.h>

static uint8_t adc_data_ready_flag;

void init_adc(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
	// Enable clock for ADC1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001772:	2101      	movs	r1, #1
 8001774:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001778:	f7ff fdfe 	bl	8001378 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800177c:	2101      	movs	r1, #1
 800177e:	2004      	movs	r0, #4
 8001780:	f7ff fdba 	bl	80012f8 <RCC_AHB1PeriphClockCmd>

	// Init GPIOB for ADC input
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 8001784:	2303      	movs	r3, #3
 8001786:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	4619      	mov	r1, r3
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <init_adc+0x74>)
 8001798:	f7ff fd02 	bl	80011a0 <GPIO_Init>

	// Init ADC1
	ADC_InitTypeDef ADC_InitStruct;
	ADC_InitStruct.ADC_ContinuousConvMode = DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	717b      	strb	r3, [r7, #5]
	ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
	ADC_InitStruct.ADC_ExternalTrigConv = DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
	ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
	ADC_InitStruct.ADC_NbrOfConversion = 1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	753b      	strb	r3, [r7, #20]
	ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 80017b0:	2300      	movs	r3, #0
 80017b2:	603b      	str	r3, [r7, #0]
	ADC_InitStruct.ADC_ScanConvMode = DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	713b      	strb	r3, [r7, #4]
	ADC_Init(ADC1, &ADC_InitStruct);
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <init_adc+0x78>)
 80017be:	f7ff fa37 	bl	8000c30 <ADC_Init>
	ADC_Cmd(ADC1, ENABLE);
 80017c2:	2101      	movs	r1, #1
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <init_adc+0x78>)
 80017c6:	f7ff fa89 	bl	8000cdc <ADC_Cmd>

	// Select input channel for ADC1
	// ADC1 channel 10 is on PC0
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_84Cycles);
 80017ca:	2304      	movs	r3, #4
 80017cc:	2201      	movs	r2, #1
 80017ce:	210a      	movs	r1, #10
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <init_adc+0x78>)
 80017d2:	f7ff fa9f 	bl	8000d14 <ADC_RegularChannelConfig>
}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40012000 	.word	0x40012000

080017e8 <read_adc>:

uint16_t read_adc(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	// Start ADC conversion
	ADC_SoftwareStartConv(ADC1);
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <read_adc+0x28>)
 80017ee:	f7ff fb5b 	bl	8000ea8 <ADC_SoftwareStartConv>
	// Wait until conversion is finish
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));
 80017f2:	bf00      	nop
 80017f4:	2102      	movs	r1, #2
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <read_adc+0x28>)
 80017f8:	f7ff fb73 	bl	8000ee2 <ADC_GetFlagStatus>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f8      	beq.n	80017f4 <read_adc+0xc>

	return ADC_GetConversionValue(ADC1);
 8001802:	4803      	ldr	r0, [pc, #12]	; (8001810 <read_adc+0x28>)
 8001804:	f7ff fb60 	bl	8000ec8 <ADC_GetConversionValue>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40012000 	.word	0x40012000

08001814 <set_adc_data_ready_flag>:
{
	return adc_data_ready_flag;
}

void 	 set_adc_data_ready_flag(uint8_t new_flag_state)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	assert(new_flag_state == 0 || new_flag_state == 1);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <set_adc_data_ready_flag+0x22>
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d005      	beq.n	8001836 <set_adc_data_ready_flag+0x22>
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <set_adc_data_ready_flag+0x30>)
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <set_adc_data_ready_flag+0x34>)
 800182e:	213b      	movs	r1, #59	; 0x3b
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <set_adc_data_ready_flag+0x38>)
 8001832:	f000 ff95 	bl	8002760 <__assert_func>
	adc_data_ready_flag = new_flag_state;
 8001836:	4a06      	ldr	r2, [pc, #24]	; (8001850 <set_adc_data_ready_flag+0x3c>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	7013      	strb	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	08003958 	.word	0x08003958
 8001848:	08003998 	.word	0x08003998
 800184c:	08003984 	.word	0x08003984
 8001850:	200010b4 	.word	0x200010b4

08001854 <initButtons>:
#include "lcd.h"

char Freq_Select = 'A';

void initButtons()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0

	//GPIO Pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800185a:	2101      	movs	r1, #1
 800185c:	2008      	movs	r0, #8
 800185e:	f7ff fd4b 	bl	80012f8 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = ButtonUp | ButtonDown | ButtonEnter;
 8001862:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001866:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001868:	2300      	movs	r3, #0
 800186a:	753b      	strb	r3, [r7, #20]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800186c:	2300      	movs	r3, #0
 800186e:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001870:	2303      	movs	r3, #3
 8001872:	757b      	strb	r3, [r7, #21]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN; //GPIO_PuPd_UP
 8001874:	2302      	movs	r3, #2
 8001876:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4619      	mov	r1, r3
 800187e:	4819      	ldr	r0, [pc, #100]	; (80018e4 <initButtons+0x90>)
 8001880:	f7ff fc8e 	bl	80011a0 <GPIO_Init>

	// Enable clock for SYSCFG
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001884:	2101      	movs	r1, #1
 8001886:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800188a:	f7ff fd75 	bl	8001378 <RCC_APB2PeriphClockCmd>

	EXTI_InitTypeDef EXTI_InitStruct;
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource10);
 800188e:	210a      	movs	r1, #10
 8001890:	2003      	movs	r0, #3
 8001892:	f7ff fd91 	bl	80013b8 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource12);
 8001896:	210c      	movs	r1, #12
 8001898:	2003      	movs	r0, #3
 800189a:	f7ff fd8d 	bl	80013b8 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource14);
 800189e:	210e      	movs	r1, #14
 80018a0:	2003      	movs	r0, #3
 80018a2:	f7ff fd89 	bl	80013b8 <SYSCFG_EXTILineConfig>
	EXTI_InitStruct.EXTI_Line = EXTI_Line10 | EXTI_Line12 | EXTI_Line14;
 80018a6:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80018aa:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80018b0:	2300      	movs	r3, #0
 80018b2:	733b      	strb	r3, [r7, #12]
	/* Triggers on rising and falling edge */
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;		//A changer pour seulement 1 des 2!!!!!!!!!!!!!
 80018b4:	2308      	movs	r3, #8
 80018b6:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStruct);
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fbc9 	bl	8001054 <EXTI_Init>

	/* Add IRQ vector to NVIC */
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = EXTI15_10_IRQn;
 80018c2:	2328      	movs	r3, #40	; 0x28
 80018c4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 80018c6:	2300      	movs	r3, #0
 80018c8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 80018ca:	2301      	movs	r3, #1
 80018cc:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff f949 	bl	8000b6c <NVIC_Init>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40020c00 	.word	0x40020c00

080018e8 <get_selected_freq>:

char get_selected_freq(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	return Freq_Select;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <get_selected_freq+0x14>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000000 	.word	0x20000000

08001900 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line10) != RESET) {
 8001904:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001908:	f7ff fc16 	bl	8001138 <EXTI_GetITStatus>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d011      	beq.n	8001936 <EXTI15_10_IRQHandler+0x36>
		//Button Up
		if (Freq_Select == 'A')
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <EXTI15_10_IRQHandler+0xa0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b41      	cmp	r3, #65	; 0x41
 8001918:	d103      	bne.n	8001922 <EXTI15_10_IRQHandler+0x22>
			incrementCutOffFreq(FcA);
 800191a:	2000      	movs	r0, #0
 800191c:	f000 fb32 	bl	8001f84 <incrementCutOffFreq>
 8001920:	e002      	b.n	8001928 <EXTI15_10_IRQHandler+0x28>
		else
			incrementCutOffFreq(FcB);
 8001922:	2001      	movs	r0, #1
 8001924:	f000 fb2e 	bl	8001f84 <incrementCutOffFreq>
		updateCutOffFreqs();
 8001928:	f000 fad8 	bl	8001edc <updateCutOffFreqs>
		//setUpdateLcdFlag(1);

		EXTI_ClearITPendingBit(EXTI_Line10);
 800192c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001930:	f7ff fc26 	bl	8001180 <EXTI_ClearITPendingBit>
 8001934:	e030      	b.n	8001998 <EXTI15_10_IRQHandler+0x98>
	}
	else if (EXTI_GetITStatus(EXTI_Line12) != RESET) {
 8001936:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800193a:	f7ff fbfd 	bl	8001138 <EXTI_GetITStatus>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d011      	beq.n	8001968 <EXTI15_10_IRQHandler+0x68>
		//Button Down
		if (Freq_Select == 'A')
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <EXTI15_10_IRQHandler+0xa0>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b41      	cmp	r3, #65	; 0x41
 800194a:	d103      	bne.n	8001954 <EXTI15_10_IRQHandler+0x54>
			decrementCutOffFreq(FcA);
 800194c:	2000      	movs	r0, #0
 800194e:	f000 fb39 	bl	8001fc4 <decrementCutOffFreq>
 8001952:	e002      	b.n	800195a <EXTI15_10_IRQHandler+0x5a>
		else
			decrementCutOffFreq(FcB);
 8001954:	2001      	movs	r0, #1
 8001956:	f000 fb35 	bl	8001fc4 <decrementCutOffFreq>
		updateCutOffFreqs();
 800195a:	f000 fabf 	bl	8001edc <updateCutOffFreqs>
		//setUpdateLcdFlag(1);

		EXTI_ClearITPendingBit(EXTI_Line12);
 800195e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001962:	f7ff fc0d 	bl	8001180 <EXTI_ClearITPendingBit>
 8001966:	e017      	b.n	8001998 <EXTI15_10_IRQHandler+0x98>
	}
	else if (EXTI_GetITStatus(EXTI_Line14) != RESET) {
 8001968:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800196c:	f7ff fbe4 	bl	8001138 <EXTI_GetITStatus>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d010      	beq.n	8001998 <EXTI15_10_IRQHandler+0x98>
		//Button Enter
		if (Freq_Select == 'A')
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <EXTI15_10_IRQHandler+0xa0>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b41      	cmp	r3, #65	; 0x41
 800197c:	d103      	bne.n	8001986 <EXTI15_10_IRQHandler+0x86>
			Freq_Select = 'B';
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <EXTI15_10_IRQHandler+0xa0>)
 8001980:	2242      	movs	r2, #66	; 0x42
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	e002      	b.n	800198c <EXTI15_10_IRQHandler+0x8c>
		else
			Freq_Select = 'A';
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <EXTI15_10_IRQHandler+0xa0>)
 8001988:	2241      	movs	r2, #65	; 0x41
 800198a:	701a      	strb	r2, [r3, #0]
		computeFilter();
 800198c:	f000 f978 	bl	8001c80 <computeFilter>
		//setUpdateLcdFlag(1);
		EXTI_ClearITPendingBit(EXTI_Line14);
 8001990:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001994:	f7ff fbf4 	bl	8001180 <EXTI_ClearITPendingBit>
	}
	updateLcd();
 8001998:	f000 f908 	bl	8001bac <updateLcd>

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000000 	.word	0x20000000

080019a4 <init_dac>:
 */

#include <dac.h>

void init_dac(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
	// Enable clock for DAC, and GPIOA
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 80019aa:	2101      	movs	r1, #1
 80019ac:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80019b0:	f7ff fcc2 	bl	8001338 <RCC_APB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80019b4:	2101      	movs	r1, #1
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7ff fcbe 	bl	8001338 <RCC_APB1PeriphClockCmd>

	// Init GPIOA pin 4 (PA4) for DAC output
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 80019bc:	2303      	movs	r3, #3
 80019be:	753b      	strb	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 80019c0:	2310      	movs	r3, #16
 80019c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4619      	mov	r1, r3
 80019ce:	480b      	ldr	r0, [pc, #44]	; (80019fc <init_dac+0x58>)
 80019d0:	f7ff fbe6 	bl	80011a0 <GPIO_Init>

	//Init DAC
	DAC_InitTypeDef DAC_InitStruct;

	DAC_InitStruct.DAC_OutputBuffer = DAC_OutputBuffer_Disable;
 80019d4:	2302      	movs	r3, #2
 80019d6:	60fb      	str	r3, [r7, #12]
	DAC_InitStruct.DAC_Trigger = DAC_Trigger_Software;
 80019d8:	233c      	movs	r3, #60	; 0x3c
 80019da:	603b      	str	r3, [r7, #0]
	DAC_InitStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]

	DAC_Init(DAC_Channel_1, &DAC_InitStruct);
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fa97 	bl	8000f18 <DAC_Init>
	DAC_Cmd(DAC_Channel_1, ENABLE);
 80019ea:	2101      	movs	r1, #1
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff fac7 	bl	8000f80 <DAC_Cmd>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40020800 	.word	0x40020800

08001a00 <write_dac>:

void write_dac(uint16_t Data)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
	// Start ADC conversion
	DAC_SetChannel1Data(DAC_Align_12b_R, Data);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fb04 	bl	800101c <DAC_SetChannel1Data>

	// Triggers transfer from DAC_DHR12R1 to DAC_DOR
	DAC_SoftwareTriggerCmd(DAC_Channel_1, ENABLE);
 8001a14:	2101      	movs	r1, #1
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fad8 	bl	8000fcc <DAC_SoftwareTriggerCmd>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <initLcd>:
static char    	unity[4] = "0 Hz";
static int 		size_of_first_line_string;
static uint8_t	update_lcd_flag;

void initLcd(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;

	//LCD
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2010      	movs	r0, #16
 8001a2e:	f7ff fc63 	bl	80012f8 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7ff fc5f 	bl	80012f8 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = 0x00FF;
 8001a3a:	23ff      	movs	r3, #255	; 0xff
 8001a3c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001a42:	2300      	movs	r3, #0
 8001a44:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001a46:	2303      	movs	r3, #3
 8001a48:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <initLcd+0x9c>)
 8001a54:	f7ff fba4 	bl	80011a0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001a64:	2303      	movs	r3, #3
 8001a66:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4814      	ldr	r0, [pc, #80]	; (8001ac4 <initLcd+0xa0>)
 8001a72:	f7ff fb95 	bl	80011a0 <GPIO_Init>


	number_of_characters_counter = 0;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <initLcd+0xa4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
	update_lcd_flag = 1;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <initLcd+0xa8>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
	size_of_first_line_string = strlen(first_line);
 8001a82:	4813      	ldr	r0, [pc, #76]	; (8001ad0 <initLcd+0xac>)
 8001a84:	f7fe fba0 	bl	80001c8 <strlen>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <initLcd+0xb0>)
 8001a8e:	601a      	str	r2, [r3, #0]
	//clear
	writeCommand(CMD_LCD_CLEAR);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f000 f821 	bl	8001ad8 <writeCommand>

	//function set : 2 lines, 8 bits and 5x8 dots
	writeCommand(CMD_LCD_FUNCTION_2_LINES_8_BITS);
 8001a96:	2038      	movs	r0, #56	; 0x38
 8001a98:	f000 f81e 	bl	8001ad8 <writeCommand>

	//Display on
	writeCommand(CMD_LCD_DISPLAY_ON);
 8001a9c:	200e      	movs	r0, #14
 8001a9e:	f000 f81b 	bl	8001ad8 <writeCommand>


	writeSymbol(first_line, size_of_first_line_string);
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <initLcd+0xb0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <initLcd+0xac>)
 8001aaa:	f000 f85f 	bl	8001b6c <writeSymbol>
	writeCommand(CMD_LCD_CHANGE_LINE);
 8001aae:	20c0      	movs	r0, #192	; 0xc0
 8001ab0:	f000 f812 	bl	8001ad8 <writeCommand>

	updateLcd();
 8001ab4:	f000 f87a 	bl	8001bac <updateLcd>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	200010b8 	.word	0x200010b8
 8001acc:	200010c0 	.word	0x200010c0
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	200010bc 	.word	0x200010bc

08001ad8 <writeCommand>:

void writeCommand(unsigned short p_command)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
	GPIO_SetBits(GPIOE, p_command & 0x00FF);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481d      	ldr	r0, [pc, #116]	; (8001b60 <writeCommand+0x88>)
 8001aec:	f7ff fbe6 	bl	80012bc <GPIO_SetBits>
	p_command = p_command >> 8;
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	80fb      	strh	r3, [r7, #6]
	GPIO_SetBits(GPIOB, p_command & 0x0006);
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	f003 0306 	and.w	r3, r3, #6
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	4818      	ldr	r0, [pc, #96]	; (8001b64 <writeCommand+0x8c>)
 8001b02:	f7ff fbdb 	bl	80012bc <GPIO_SetBits>

	int delay = 1000000;
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <writeCommand+0x90>)
 8001b08:	60fb      	str	r3, [r7, #12]
	while(delay--){};
 8001b0a:	bf00      	nop
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e5a      	subs	r2, r3, #1
 8001b10:	60fa      	str	r2, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1fa      	bne.n	8001b0c <writeCommand+0x34>

	GPIO_SetBits(GPIOB, 0x0001);
 8001b16:	2101      	movs	r1, #1
 8001b18:	4812      	ldr	r0, [pc, #72]	; (8001b64 <writeCommand+0x8c>)
 8001b1a:	f7ff fbcf 	bl	80012bc <GPIO_SetBits>

	delay = 1000000;
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <writeCommand+0x90>)
 8001b20:	60fb      	str	r3, [r7, #12]
	while(delay--){};
 8001b22:	bf00      	nop
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e5a      	subs	r2, r3, #1
 8001b28:	60fa      	str	r2, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1fa      	bne.n	8001b24 <writeCommand+0x4c>

	GPIO_ResetBits(GPIOB, 0x0001);
 8001b2e:	2101      	movs	r1, #1
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <writeCommand+0x8c>)
 8001b32:	f7ff fbd2 	bl	80012da <GPIO_ResetBits>

	delay = 1000000;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <writeCommand+0x90>)
 8001b38:	60fb      	str	r3, [r7, #12]
	while(delay--){};
 8001b3a:	bf00      	nop
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	60fa      	str	r2, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1fa      	bne.n	8001b3c <writeCommand+0x64>

	GPIO_ResetBits(GPIOB, 0x0006);
 8001b46:	2106      	movs	r1, #6
 8001b48:	4806      	ldr	r0, [pc, #24]	; (8001b64 <writeCommand+0x8c>)
 8001b4a:	f7ff fbc6 	bl	80012da <GPIO_ResetBits>
	GPIO_ResetBits(GPIOE, 0x00FF);
 8001b4e:	21ff      	movs	r1, #255	; 0xff
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <writeCommand+0x88>)
 8001b52:	f7ff fbc2 	bl	80012da <GPIO_ResetBits>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	000f4240 	.word	0x000f4240

08001b6c <writeSymbol>:

void writeSymbol(char * p_symbol, int size_of_symbol)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size_of_symbol; ++i)
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e00e      	b.n	8001b9a <writeSymbol+0x2e>
	{
		unsigned short cmd = 0b10000000000 | p_symbol[i];
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8a:	817b      	strh	r3, [r7, #10]
		writeCommand(cmd);
 8001b8c:	897b      	ldrh	r3, [r7, #10]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ffa2 	bl	8001ad8 <writeCommand>
	for (int i = 0; i < size_of_symbol; ++i)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbec      	blt.n	8001b7c <writeSymbol+0x10>
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <updateLcd>:

static char   freqVector[5];
void updateLcd(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
	int freq;
	int* cut_off_freqs = getCutOffFreqsHandle();
 8001bb2:	f000 fa27 	bl	8002004 <getCutOffFreqsHandle>
 8001bb6:	6038      	str	r0, [r7, #0]

	if (get_selected_freq() == 'A')
 8001bb8:	f7ff fe96 	bl	80018e8 <get_selected_freq>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b41      	cmp	r3, #65	; 0x41
 8001bc0:	d103      	bne.n	8001bca <updateLcd+0x1e>
		freq = (int)cut_off_freqs[FcA];
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	e002      	b.n	8001bd0 <updateLcd+0x24>
	else
		freq = (int)cut_off_freqs[FcB];
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	607b      	str	r3, [r7, #4]

	writeCommand(CMD_LCD_CLEAR);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff ff81 	bl	8001ad8 <writeCommand>
	writeSymbol(first_line, size_of_first_line_string);
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <updateLcd+0x70>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4810      	ldr	r0, [pc, #64]	; (8001c20 <updateLcd+0x74>)
 8001bde:	f7ff ffc5 	bl	8001b6c <writeSymbol>

	writeCommand(CMD_LCD_CHANGE_LINE);
 8001be2:	20c0      	movs	r0, #192	; 0xc0
 8001be4:	f7ff ff78 	bl	8001ad8 <writeCommand>

	sprintf(freqVector, "%d", freq);
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	490e      	ldr	r1, [pc, #56]	; (8001c24 <updateLcd+0x78>)
 8001bec:	480e      	ldr	r0, [pc, #56]	; (8001c28 <updateLcd+0x7c>)
 8001bee:	f000 fd53 	bl	8002698 <siprintf>
	writeSymbol(freqVector, strlen(freqVector));
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <updateLcd+0x7c>)
 8001bf4:	f7fe fae8 	bl	80001c8 <strlen>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480a      	ldr	r0, [pc, #40]	; (8001c28 <updateLcd+0x7c>)
 8001bfe:	f7ff ffb5 	bl	8001b6c <writeSymbol>
	writeSymbol(unity, strlen(unity));
 8001c02:	480a      	ldr	r0, [pc, #40]	; (8001c2c <updateLcd+0x80>)
 8001c04:	f7fe fae0 	bl	80001c8 <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4807      	ldr	r0, [pc, #28]	; (8001c2c <updateLcd+0x80>)
 8001c0e:	f7ff ffad 	bl	8001b6c <writeSymbol>

}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200010bc 	.word	0x200010bc
 8001c20:	20000004 	.word	0x20000004
 8001c24:	08003994 	.word	0x08003994
 8001c28:	200010c4 	.word	0x200010c4
 8001c2c:	20000014 	.word	0x20000014

08001c30 <main>:
#include "buttons.h"
#include "BufferCirculaire.h"
#include "string.h"

int main(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
	uint8_t filter_calculated = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	71fb      	strb	r3, [r7, #7]

	initTimerDelay();
 8001c3a:	f000 faf7 	bl	800222c <initTimerDelay>
	initLcd();
 8001c3e:	f7ff fef1 	bl	8001a24 <initLcd>
	initButtons();
 8001c42:	f7ff fe07 	bl	8001854 <initButtons>
	initBC();
 8001c46:	f7ff fce5 	bl	8001614 <initBC>
	init_adc();
 8001c4a:	f7ff fd8f 	bl	800176c <init_adc>
	init_dac();
 8001c4e:	f7ff fea9 	bl	80019a4 <init_dac>

	initTimerEchantillonnage();
 8001c52:	f000 fb23 	bl	800229c <initTimerEchantillonnage>

	//Main Loop
	while (1)
	{
		if (getNewFreqsFlag())
 8001c56:	f000 f989 	bl	8001f6c <getNewFreqsFlag>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <main+0x34>
			updateCutOffFreqs();
 8001c60:	f000 f93c 	bl	8001edc <updateCutOffFreqs>

		/* TEST À ENLEVER */
		if (filter_calculated == 0)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <main+0x42>
		{
			computeFilter();
 8001c6a:	f000 f809 	bl	8001c80 <computeFilter>
			filter_calculated = 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
		/*if (getUpdateLcdFlag())
		{
			updateLcd();
			setUpdateLcdFlag(0);
		}*/
		Delay(30);
 8001c72:	201e      	movs	r0, #30
 8001c74:	f000 fb44 	bl	8002300 <Delay>
		if (getNewFreqsFlag())
 8001c78:	e7ed      	b.n	8001c56 <main+0x26>
 8001c7a:	0000      	movs	r0, r0
 8001c7c:	0000      	movs	r0, r0
	...

08001c80 <computeFilter>:
	newFreqsFlag = 0;
	computeFilterFlag = 0;
}

void computeFilter()
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
	float WcA = 2.0 * M_PI * cutOffFreqs[FcA] / (float)FS;
 8001c86:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <computeFilter+0x170>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc08 	bl	80004a0 <__aeabi_f2d>
 8001c90:	a351      	add	r3, pc, #324	; (adr r3, 8001dd8 <computeFilter+0x158>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fc57 	bl	8000548 <__aeabi_dmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	a34f      	add	r3, pc, #316	; (adr r3, 8001de0 <computeFilter+0x160>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fd78 	bl	800079c <__aeabi_ddiv>
 8001cac:	4603      	mov	r3, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	f7fe ff0a 	bl	8000acc <__aeabi_d2f>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60bb      	str	r3, [r7, #8]
	float WcB = 2.0 * M_PI * cutOffFreqs[FcB]  / (float)FS;
 8001cbc:	4b4c      	ldr	r3, [pc, #304]	; (8001df0 <computeFilter+0x170>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fbed 	bl	80004a0 <__aeabi_f2d>
 8001cc6:	a344      	add	r3, pc, #272	; (adr r3, 8001dd8 <computeFilter+0x158>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fc3c 	bl	8000548 <__aeabi_dmul>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	a341      	add	r3, pc, #260	; (adr r3, 8001de0 <computeFilter+0x160>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	f7fe fd5d 	bl	800079c <__aeabi_ddiv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4621      	mov	r1, r4
 8001cea:	f7fe feef 	bl	8000acc <__aeabi_d2f>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < LENGTH_FILTRE; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e068      	b.n	8001dca <computeFilter+0x14a>
	{
		int index = i - ((LENGTH_FILTRE - 1) / 2);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3b0a      	subs	r3, #10
 8001cfc:	603b      	str	r3, [r7, #0]
		if (index == 0)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d117      	bne.n	8001d34 <computeFilter+0xb4>
			myFilter[i] = (WcB - WcA)/M_PI;
 8001d04:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d10:	ee17 0a90 	vmov	r0, s15
 8001d14:	f7fe fbc4 	bl	80004a0 <__aeabi_f2d>
 8001d18:	a333      	add	r3, pc, #204	; (adr r3, 8001de8 <computeFilter+0x168>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fd3d 	bl	800079c <__aeabi_ddiv>
 8001d22:	4603      	mov	r3, r0
 8001d24:	460c      	mov	r4, r1
 8001d26:	4933      	ldr	r1, [pc, #204]	; (8001df4 <computeFilter+0x174>)
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	00d2      	lsls	r2, r2, #3
 8001d2c:	440a      	add	r2, r1
 8001d2e:	e882 0018 	stmia.w	r2, {r3, r4}
 8001d32:	e047      	b.n	8001dc4 <computeFilter+0x144>
		else
			myFilter[i] = (sin(index * WcB) - sin(index * WcA)) / (M_PI * index);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	ee17 0a90 	vmov	r0, s15
 8001d4a:	f7fe fba9 	bl	80004a0 <__aeabi_f2d>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	ec44 3b10 	vmov	d0, r3, r4
 8001d56:	f000 fd93 	bl	8002880 <sin>
 8001d5a:	ec55 4b10 	vmov	r4, r5, d0
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d68:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	ee17 0a90 	vmov	r0, s15
 8001d74:	f7fe fb94 	bl	80004a0 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	ec43 2b10 	vmov	d0, r2, r3
 8001d80:	f000 fd7e 	bl	8002880 <sin>
 8001d84:	ec53 2b10 	vmov	r2, r3, d0
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fa28 	bl	80001e0 <__aeabi_dsub>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4625      	mov	r5, r4
 8001d96:	461c      	mov	r4, r3
 8001d98:	6838      	ldr	r0, [r7, #0]
 8001d9a:	f7fe fb6f 	bl	800047c <__aeabi_i2d>
 8001d9e:	a312      	add	r3, pc, #72	; (adr r3, 8001de8 <computeFilter+0x168>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fbd0 	bl	8000548 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4620      	mov	r0, r4
 8001dae:	4629      	mov	r1, r5
 8001db0:	f7fe fcf4 	bl	800079c <__aeabi_ddiv>
 8001db4:	4603      	mov	r3, r0
 8001db6:	460c      	mov	r4, r1
 8001db8:	490e      	ldr	r1, [pc, #56]	; (8001df4 <computeFilter+0x174>)
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	00d2      	lsls	r2, r2, #3
 8001dbe:	440a      	add	r2, r1
 8001dc0:	e882 0018 	stmia.w	r2, {r3, r4}
	for (int i = 0; i < LENGTH_FILTRE; i++)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b14      	cmp	r3, #20
 8001dce:	dd93      	ble.n	8001cf8 <computeFilter+0x78>

		//myFilter[i] = 1.0f / LENGTH_FILTRE;
	}

}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd8:	54442d18 	.word	0x54442d18
 8001ddc:	401921fb 	.word	0x401921fb
 8001de0:	00000000 	.word	0x00000000
 8001de4:	40f38800 	.word	0x40f38800
 8001de8:	54442d18 	.word	0x54442d18
 8001dec:	400921fb 	.word	0x400921fb
 8001df0:	20000018 	.word	0x20000018
 8001df4:	200010d0 	.word	0x200010d0

08001df8 <readBC_Filtre>:

int readBC_Filtre(BufferCirculaire* p_buffer)
{
 8001df8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	float out = 0;
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
	int index = p_buffer->tail;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0e:	3304      	adds	r3, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
	incrementReadingTailBC();
 8001e14:	f7ff fc78 	bl	8001708 <incrementReadingTailBC>
	for (int i = 0; i < LENGTH_FILTRE; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e040      	b.n	8001ea0 <readBC_Filtre+0xa8>
	{
		out += myFilter[i] * p_buffer->data[index];
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7fe fb3e 	bl	80004a0 <__aeabi_f2d>
 8001e24:	4680      	mov	r8, r0
 8001e26:	4689      	mov	r9, r1
 8001e28:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <readBC_Filtre+0xdc>)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb1d 	bl	800047c <__aeabi_i2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fb7d 	bl	8000548 <__aeabi_dmul>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	461a      	mov	r2, r3
 8001e54:	4623      	mov	r3, r4
 8001e56:	4640      	mov	r0, r8
 8001e58:	4649      	mov	r1, r9
 8001e5a:	f7fe f9c3 	bl	80001e4 <__adddf3>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	460c      	mov	r4, r1
 8001e62:	4618      	mov	r0, r3
 8001e64:	4621      	mov	r1, r4
 8001e66:	f7fe fe31 	bl	8000acc <__aeabi_d2f>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	617b      	str	r3, [r7, #20]
		index = (p_buffer->bufferSize + p_buffer->tail - i) % p_buffer->bufferSize;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	441a      	add	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e92:	fb02 f201 	mul.w	r2, r2, r1
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < LENGTH_FILTRE; i++)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b14      	cmp	r3, #20
 8001ea4:	ddbb      	ble.n	8001e1e <readBC_Filtre+0x26>
	}
	return out < 4096.0f ? (int)out : 4096;
 8001ea6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eaa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ed8 <readBC_Filtre+0xe0>
 8001eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	d506      	bpl.n	8001ec6 <readBC_Filtre+0xce>
 8001eb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec0:	ee17 3a90 	vmov	r3, s15
 8001ec4:	e001      	b.n	8001eca <readBC_Filtre+0xd2>
 8001ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ed4:	200010d0 	.word	0x200010d0
 8001ed8:	45800000 	.word	0x45800000

08001edc <updateCutOffFreqs>:


void updateCutOffFreqs(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
	if (cutOffFreqs[FcB] < cutOffFreqs[FcA]) {
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001ee4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	d514      	bpl.n	8001f22 <updateCutOffFreqs+0x46>
		int temp = cutOffFreqs[FcA];
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f02:	ee17 3a90 	vmov	r3, s15
 8001f06:	607b      	str	r3, [r7, #4]
		cutOffFreqs[FcA] = cutOffFreqs[FcB];
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001f0e:	6013      	str	r3, [r2, #0]
		cutOffFreqs[FcB] = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001f1c:	edc3 7a01 	vstr	s15, [r3, #4]
 8001f20:	e014      	b.n	8001f4c <updateCutOffFreqs+0x70>
	}
	else if (cutOffFreqs[FcA] == cutOffFreqs[FcB])
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001f2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	d109      	bne.n	8001f4c <updateCutOffFreqs+0x70>
		cutOffFreqs[FcA] -= INCREMENTATION_FREQ;
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001f64 <updateCutOffFreqs+0x88>
 8001f42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <updateCutOffFreqs+0x84>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
	newFreqsFlag = 0;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <updateCutOffFreqs+0x8c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000018 	.word	0x20000018
 8001f64:	42c80000 	.word	0x42c80000
 8001f68:	20001178 	.word	0x20001178

08001f6c <getNewFreqsFlag>:

uint8_t getNewFreqsFlag(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
	return newFreqsFlag;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <getNewFreqsFlag+0x14>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20001178 	.word	0x20001178

08001f84 <incrementCutOffFreq>:
{
	computeFilterFlag = new_flag_state;
}

void incrementCutOffFreq(cut_off_freqs_t cut_off_freq)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	cutOffFreqs[cut_off_freq] += INCREMENTATION_FREQ;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	490a      	ldr	r1, [pc, #40]	; (8001fbc <incrementCutOffFreq+0x38>)
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	440a      	add	r2, r1
 8001f98:	edd2 7a00 	vldr	s15, [r2]
 8001f9c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001fc0 <incrementCutOffFreq+0x3c>
 8001fa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fa4:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <incrementCutOffFreq+0x38>)
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	edc3 7a00 	vstr	s15, [r3]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000018 	.word	0x20000018
 8001fc0:	42c80000 	.word	0x42c80000

08001fc4 <decrementCutOffFreq>:

void decrementCutOffFreq(cut_off_freqs_t cut_off_freq)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
	cutOffFreqs[cut_off_freq] -= INCREMENTATION_FREQ;
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	79fa      	ldrb	r2, [r7, #7]
 8001fd2:	490a      	ldr	r1, [pc, #40]	; (8001ffc <decrementCutOffFreq+0x38>)
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	440a      	add	r2, r1
 8001fd8:	edd2 7a00 	vldr	s15, [r2]
 8001fdc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002000 <decrementCutOffFreq+0x3c>
 8001fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <decrementCutOffFreq+0x38>)
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	edc3 7a00 	vstr	s15, [r3]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000018 	.word	0x20000018
 8002000:	42c80000 	.word	0x42c80000

08002004 <getCutOffFreqsHandle>:

int* getCutOffFreqsHandle(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	return &cutOffFreqs[0];
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <getCutOffFreqsHandle+0x10>)
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	20000018 	.word	0x20000018

08002018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002050 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800201c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800201e:	e003      	b.n	8002028 <LoopCopyDataInit>

08002020 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002022:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002024:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002026:	3104      	adds	r1, #4

08002028 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800202c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800202e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002030:	d3f6      	bcc.n	8002020 <CopyDataInit>
  ldr  r2, =_sbss
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002034:	e002      	b.n	800203c <LoopFillZerobss>

08002036 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002036:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002038:	f842 3b04 	str.w	r3, [r2], #4

0800203c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800203e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002040:	d3f9      	bcc.n	8002036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002042:	f000 f841 	bl	80020c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002046:	f000 fba9 	bl	800279c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204a:	f7ff fdf1 	bl	8001c30 <main>
  bx  lr    
 800204e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002050:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002054:	08003bd0 	.word	0x08003bd0
  ldr  r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800205c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8002060:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002064:	20001184 	.word	0x20001184

08002068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC_IRQHandler>

0800206a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800207c:	e7fe      	b.n	800207c <HardFault_Handler+0x4>

0800207e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002082:	e7fe      	b.n	8002082 <MemManage_Handler+0x4>

08002084 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002088:	e7fe      	b.n	8002088 <BusFault_Handler+0x4>

0800208a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800208e:	e7fe      	b.n	800208e <UsageFault_Handler+0x4>

08002090 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020cc:	4a16      	ldr	r2, [pc, #88]	; (8002128 <SystemInit+0x60>)
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <SystemInit+0x60>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <SystemInit+0x64>)
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <SystemInit+0x64>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <SystemInit+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80020ee:	4a0f      	ldr	r2, [pc, #60]	; (800212c <SystemInit+0x64>)
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <SystemInit+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80020f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <SystemInit+0x64>)
 8002100:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <SystemInit+0x68>)
 8002102:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002104:	4a09      	ldr	r2, [pc, #36]	; (800212c <SystemInit+0x64>)
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <SystemInit+0x64>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <SystemInit+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002116:	f000 f80d 	bl	8002134 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800211a:	4b03      	ldr	r3, [pc, #12]	; (8002128 <SystemInit+0x60>)
 800211c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002120:	609a      	str	r2, [r3, #8]
#endif
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00
 800212c:	40023800 	.word	0x40023800
 8002130:	24003010 	.word	0x24003010

08002134 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	2300      	movs	r3, #0
 8002140:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002142:	4a36      	ldr	r2, [pc, #216]	; (800221c <SetSysClock+0xe8>)
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <SetSysClock+0xe8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <SetSysClock+0xe8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3301      	adds	r3, #1
 800215c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <SetSysClock+0x38>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800216a:	d1f0      	bne.n	800214e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <SetSysClock+0xe8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002178:	2301      	movs	r3, #1
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	e001      	b.n	8002182 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d142      	bne.n	800220e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002188:	4a24      	ldr	r2, [pc, #144]	; (800221c <SetSysClock+0xe8>)
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <SetSysClock+0xe8>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002194:	4a22      	ldr	r2, [pc, #136]	; (8002220 <SetSysClock+0xec>)
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <SetSysClock+0xec>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800219e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80021a0:	4a1e      	ldr	r2, [pc, #120]	; (800221c <SetSysClock+0xe8>)
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <SetSysClock+0xe8>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <SetSysClock+0xe8>)
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <SetSysClock+0xe8>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <SetSysClock+0xe8>)
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <SetSysClock+0xe8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80021be:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <SetSysClock+0xe8>)
 80021c2:	4a18      	ldr	r2, [pc, #96]	; (8002224 <SetSysClock+0xf0>)
 80021c4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <SetSysClock+0xe8>)
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <SetSysClock+0xe8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80021d2:	bf00      	nop
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <SetSysClock+0xe8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f9      	beq.n	80021d4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <SetSysClock+0xf4>)
 80021e2:	f240 6205 	movw	r2, #1541	; 0x605
 80021e6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80021e8:	4a0c      	ldr	r2, [pc, #48]	; (800221c <SetSysClock+0xe8>)
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <SetSysClock+0xe8>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80021f4:	4a09      	ldr	r2, [pc, #36]	; (800221c <SetSysClock+0xe8>)
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <SetSysClock+0xe8>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002200:	bf00      	nop
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <SetSysClock+0xe8>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d1f9      	bne.n	8002202 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40007000 	.word	0x40007000
 8002224:	07405408 	.word	0x07405408
 8002228:	40023c00 	.word	0x40023c00

0800222c <initTimerDelay>:
#include "passBandFilter.h"

static volatile int DelayCount;

void initTimerDelay()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
	DelayCount = 0;
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <initTimerDelay+0x6c>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
	TIM_TimeBaseInitTypeDef TIM_BaseStruct;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable clock for TIM2 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002238:	2101      	movs	r1, #1
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff f87c 	bl	8001338 <RCC_APB1PeriphClockCmd>

	TIM_BaseStruct.TIM_Prescaler = 8399;
 8002240:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8002244:	80bb      	strh	r3, [r7, #4]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8002246:	2300      	movs	r3, #0
 8002248:	80fb      	strh	r3, [r7, #6]

	TIM_BaseStruct.TIM_Period = 9; // 1000Hz PWM
 800224a:	2309      	movs	r3, #9
 800224c:	60bb      	str	r3, [r7, #8]
	TIM_BaseStruct.TIM_ClockDivision = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	81bb      	strh	r3, [r7, #12]
	TIM_BaseStruct.TIM_RepetitionCounter = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(TIM2, &TIM_BaseStruct);
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	4619      	mov	r1, r3
 800225a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800225e:	f7ff f8ed 	bl	800143c <TIM_TimeBaseInit>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8002262:	2201      	movs	r2, #1
 8002264:	2101      	movs	r1, #1
 8002266:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800226a:	f7ff f973 	bl	8001554 <TIM_ITConfig>
	TIM_Cmd(TIM2, ENABLE);
 800226e:	2101      	movs	r1, #1
 8002270:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002274:	f7ff f94e 	bl	8001514 <TIM_Cmd>

	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002278:	231c      	movs	r3, #28
 800227a:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002284:	2301      	movs	r3, #1
 8002286:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8002288:	463b      	mov	r3, r7
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fc6e 	bl	8000b6c <NVIC_Init>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000117c 	.word	0x2000117c

0800229c <initTimerEchantillonnage>:

void initTimerEchantillonnage()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_BaseStruct;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable clock for TIM4 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80022a2:	2101      	movs	r1, #1
 80022a4:	2004      	movs	r0, #4
 80022a6:	f7ff f847 	bl	8001338 <RCC_APB1PeriphClockCmd>

	//TIM_BaseStruct.TIM_Prescaler = 8399;
	TIM_BaseStruct.TIM_Prescaler = SAMPLING_TIME_PRESCALER;
 80022aa:	f240 431a 	movw	r3, #1050	; 0x41a
 80022ae:	80bb      	strh	r3, [r7, #4]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 80022b0:	2300      	movs	r3, #0
 80022b2:	80fb      	strh	r3, [r7, #6]

	TIM_BaseStruct.TIM_Period = 1; // Fs = 10kHz
 80022b4:	2301      	movs	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
	TIM_BaseStruct.TIM_ClockDivision = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	81bb      	strh	r3, [r7, #12]
	TIM_BaseStruct.TIM_RepetitionCounter = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(TIM4, &TIM_BaseStruct);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	480d      	ldr	r0, [pc, #52]	; (80022fc <initTimerEchantillonnage+0x60>)
 80022c6:	f7ff f8b9 	bl	800143c <TIM_TimeBaseInit>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2101      	movs	r1, #1
 80022ce:	480b      	ldr	r0, [pc, #44]	; (80022fc <initTimerEchantillonnage+0x60>)
 80022d0:	f7ff f940 	bl	8001554 <TIM_ITConfig>
	TIM_Cmd(TIM4, ENABLE);
 80022d4:	2101      	movs	r1, #1
 80022d6:	4809      	ldr	r0, [pc, #36]	; (80022fc <initTimerEchantillonnage+0x60>)
 80022d8:	f7ff f91c 	bl	8001514 <TIM_Cmd>

	/* Enable the TIM4 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 80022dc:	231e      	movs	r3, #30
 80022de:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 80022ec:	463b      	mov	r3, r7
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fc3c 	bl	8000b6c <NVIC_Init>
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40000800 	.word	0x40000800

08002300 <Delay>:

void Delay(int p_countdown)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	DelayCount = p_countdown;
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <Delay+0x24>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
	while (DelayCount) {};
 800230e:	bf00      	nop
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <Delay+0x24>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1fb      	bne.n	8002310 <Delay+0x10>
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	2000117c 	.word	0x2000117c

08002328 <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update))
 800232c:	2101      	movs	r1, #1
 800232e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002332:	f7ff f933 	bl	800159c <TIM_GetITStatus>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <TIM2_IRQHandler+0x28>
	{
		DelayCount--; //Interrupt tous les 1ms
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <TIM2_IRQHandler+0x2c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3b01      	subs	r3, #1
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <TIM2_IRQHandler+0x2c>)
 8002344:	6013      	str	r3, [r2, #0]
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8002346:	2101      	movs	r1, #1
 8002348:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800234c:	f7ff f950 	bl	80015f0 <TIM_ClearITPendingBit>
	}
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2000117c 	.word	0x2000117c

08002358 <TIM4_IRQHandler>:

void TIM4_IRQHandler()
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
	BufferCirculaire* myBC = getBCHandle();
 800235e:	f7ff f9fb 	bl	8001758 <getBCHandle>
 8002362:	6078      	str	r0, [r7, #4]
	if (TIM_GetITStatus(TIM4, TIM_IT_Update))
 8002364:	2101      	movs	r1, #1
 8002366:	4810      	ldr	r0, [pc, #64]	; (80023a8 <TIM4_IRQHandler+0x50>)
 8002368:	f7ff f918 	bl	800159c <TIM_GetITStatus>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d015      	beq.n	800239e <TIM4_IRQHandler+0x46>
	{
		writeBC(read_adc());	//Echantillonne a 10kHz avec Tim4 et met data dans le BufferCirculaire
 8002372:	f7ff fa39 	bl	80017e8 <read_adc>
 8002376:	4603      	mov	r3, r0
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f97f 	bl	800167c <writeBC>
		int valueToPutInDAC = readBC_Filtre(myBC);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fd3a 	bl	8001df8 <readBC_Filtre>
 8002384:	6038      	str	r0, [r7, #0]
		write_dac(valueToPutInDAC);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fb38 	bl	8001a00 <write_dac>
		//write_dac(read_adc());
		set_adc_data_ready_flag(0);
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff fa3f 	bl	8001814 <set_adc_data_ready_flag>
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8002396:	2101      	movs	r1, #1
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <TIM4_IRQHandler+0x50>)
 800239a:	f7ff f929 	bl	80015f0 <TIM_ClearITPendingBit>
	}
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40000800 	.word	0x40000800

080023ac <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
	int div = 1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80023bc:	e004      	b.n	80023c8 <ts_itoa+0x1c>
		div *= base;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d2f3      	bcs.n	80023be <ts_itoa+0x12>

	while (div != 0)
 80023d6:	e029      	b.n	800242c <ts_itoa+0x80>
	{
		int num = d/div;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80023ea:	fb02 f201 	mul.w	r2, r2, r1
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b09      	cmp	r3, #9
 8002400:	dd0a      	ble.n	8002418 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1c59      	adds	r1, r3, #1
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	6011      	str	r1, [r2, #0]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	3237      	adds	r2, #55	; 0x37
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	e009      	b.n	800242c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1c59      	adds	r1, r3, #1
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	6011      	str	r1, [r2, #0]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	3230      	adds	r2, #48	; 0x30
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1d2      	bne.n	80023d8 <ts_itoa+0x2c>
	}
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b088      	sub	sp, #32
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800244e:	e07d      	b.n	800254c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b25      	cmp	r3, #37	; 0x25
 8002456:	d171      	bne.n	800253c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3301      	adds	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d01e      	beq.n	80024a4 <ts_formatstring+0x66>
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	dc06      	bgt.n	8002478 <ts_formatstring+0x3a>
 800246a:	2b58      	cmp	r3, #88	; 0x58
 800246c:	d050      	beq.n	8002510 <ts_formatstring+0xd2>
 800246e:	2b63      	cmp	r3, #99	; 0x63
 8002470:	d00e      	beq.n	8002490 <ts_formatstring+0x52>
 8002472:	2b25      	cmp	r3, #37	; 0x25
 8002474:	d058      	beq.n	8002528 <ts_formatstring+0xea>
 8002476:	e05d      	b.n	8002534 <ts_formatstring+0xf6>
 8002478:	2b73      	cmp	r3, #115	; 0x73
 800247a:	d02b      	beq.n	80024d4 <ts_formatstring+0x96>
 800247c:	2b73      	cmp	r3, #115	; 0x73
 800247e:	dc02      	bgt.n	8002486 <ts_formatstring+0x48>
 8002480:	2b69      	cmp	r3, #105	; 0x69
 8002482:	d00f      	beq.n	80024a4 <ts_formatstring+0x66>
 8002484:	e056      	b.n	8002534 <ts_formatstring+0xf6>
 8002486:	2b75      	cmp	r3, #117	; 0x75
 8002488:	d037      	beq.n	80024fa <ts_formatstring+0xbc>
 800248a:	2b78      	cmp	r3, #120	; 0x78
 800248c:	d040      	beq.n	8002510 <ts_formatstring+0xd2>
 800248e:	e051      	b.n	8002534 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	60fa      	str	r2, [r7, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	1d11      	adds	r1, r2, #4
 800249a:	6079      	str	r1, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
				break;
 80024a2:	e047      	b.n	8002534 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	da07      	bge.n	80024c4 <ts_formatstring+0x86>
					{
						val *= -1;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	425b      	negs	r3, r3
 80024b8:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	60fa      	str	r2, [r7, #12]
 80024c0:	222d      	movs	r2, #45	; 0x2d
 80024c2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80024c4:	69f9      	ldr	r1, [r7, #28]
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	220a      	movs	r2, #10
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff6d 	bl	80023ac <ts_itoa>
				}
				break;
 80024d2:	e02f      	b.n	8002534 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	1d1a      	adds	r2, r3, #4
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80024de:	e007      	b.n	80024f0 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60fa      	str	r2, [r7, #12]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	1c51      	adds	r1, r2, #1
 80024ea:	61b9      	str	r1, [r7, #24]
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f3      	bne.n	80024e0 <ts_formatstring+0xa2>
					}
				}
				break;
 80024f8:	e01c      	b.n	8002534 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	1d1a      	adds	r2, r3, #4
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	f107 030c 	add.w	r3, r7, #12
 8002506:	220a      	movs	r2, #10
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff4f 	bl	80023ac <ts_itoa>
				break;
 800250e:	e011      	b.n	8002534 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	1d1a      	adds	r2, r3, #4
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	2210      	movs	r2, #16
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff43 	bl	80023ac <ts_itoa>
				break;
 8002526:	e005      	b.n	8002534 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	60fa      	str	r2, [r7, #12]
 800252e:	2225      	movs	r2, #37	; 0x25
 8002530:	701a      	strb	r2, [r3, #0]
				  break;
 8002532:	bf00      	nop
			}
			fmt++;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	3301      	adds	r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	e007      	b.n	800254c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60fa      	str	r2, [r7, #12]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	1c51      	adds	r1, r2, #1
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f af7d 	bne.w	8002450 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	461a      	mov	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	1ad3      	subs	r3, r2, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	int length = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800257a:	e081      	b.n	8002680 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b25      	cmp	r3, #37	; 0x25
 8002582:	d177      	bne.n	8002674 <ts_formatlength+0x108>
		{
			++fmt;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3301      	adds	r3, #1
 8002588:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	3b58      	subs	r3, #88	; 0x58
 8002590:	2b20      	cmp	r3, #32
 8002592:	d86a      	bhi.n	800266a <ts_formatlength+0xfe>
 8002594:	a201      	add	r2, pc, #4	; (adr r2, 800259c <ts_formatlength+0x30>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	0800265d 	.word	0x0800265d
 80025a0:	0800266b 	.word	0x0800266b
 80025a4:	0800266b 	.word	0x0800266b
 80025a8:	0800266b 	.word	0x0800266b
 80025ac:	0800266b 	.word	0x0800266b
 80025b0:	0800266b 	.word	0x0800266b
 80025b4:	0800266b 	.word	0x0800266b
 80025b8:	0800266b 	.word	0x0800266b
 80025bc:	0800266b 	.word	0x0800266b
 80025c0:	0800266b 	.word	0x0800266b
 80025c4:	0800266b 	.word	0x0800266b
 80025c8:	08002621 	.word	0x08002621
 80025cc:	0800262f 	.word	0x0800262f
 80025d0:	0800266b 	.word	0x0800266b
 80025d4:	0800266b 	.word	0x0800266b
 80025d8:	0800266b 	.word	0x0800266b
 80025dc:	0800266b 	.word	0x0800266b
 80025e0:	0800262f 	.word	0x0800262f
 80025e4:	0800266b 	.word	0x0800266b
 80025e8:	0800266b 	.word	0x0800266b
 80025ec:	0800266b 	.word	0x0800266b
 80025f0:	0800266b 	.word	0x0800266b
 80025f4:	0800266b 	.word	0x0800266b
 80025f8:	0800266b 	.word	0x0800266b
 80025fc:	0800266b 	.word	0x0800266b
 8002600:	0800266b 	.word	0x0800266b
 8002604:	0800266b 	.word	0x0800266b
 8002608:	0800263d 	.word	0x0800263d
 800260c:	0800266b 	.word	0x0800266b
 8002610:	0800262f 	.word	0x0800262f
 8002614:	0800266b 	.word	0x0800266b
 8002618:	0800266b 	.word	0x0800266b
 800261c:	0800265d 	.word	0x0800265d
			{
			  case 'c':
		  		  va_arg(va, int);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	3304      	adds	r3, #4
 8002624:	603b      	str	r3, [r7, #0]
				  ++length;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3301      	adds	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
				  break;
 800262c:	e025      	b.n	800267a <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	330b      	adds	r3, #11
 8002632:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	3304      	adds	r3, #4
 8002638:	603b      	str	r3, [r7, #0]
				  break;
 800263a:	e01e      	b.n	800267a <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	1d1a      	adds	r2, r3, #4
 8002640:	603a      	str	r2, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8002646:	e002      	b.n	800264e <ts_formatlength+0xe2>
			  			  ++length;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3301      	adds	r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	60ba      	str	r2, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f6      	bne.n	8002648 <ts_formatlength+0xdc>
			  	  }
				  break;
 800265a:	e00e      	b.n	800267a <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3308      	adds	r3, #8
 8002660:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	3304      	adds	r3, #4
 8002666:	603b      	str	r3, [r7, #0]
				  break;
 8002668:	e007      	b.n	800267a <ts_formatlength+0x10e>
			  default:
				  ++length;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3301      	adds	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
				  break;
 8002670:	bf00      	nop
 8002672:	e002      	b.n	800267a <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3301      	adds	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3301      	adds	r3, #1
 800267e:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f47f af79 	bne.w	800257c <ts_formatlength+0x10>
	}
	return length;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8002698:	b40e      	push	{r1, r2, r3}
 800269a:	b580      	push	{r7, lr}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80026a2:	f107 0320 	add.w	r3, r7, #32
 80026a6:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	69f9      	ldr	r1, [r7, #28]
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fec6 	bl	800243e <ts_formatstring>
 80026b2:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80026b4:	68fb      	ldr	r3, [r7, #12]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026c0:	b003      	add	sp, #12
 80026c2:	4770      	bx	lr

080026c4 <fiprintf>:
**            given file stream according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int fiprintf(FILE * stream, const char *fmt, ...)
{
 80026c4:	b40e      	push	{r1, r2, r3}
 80026c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	int length = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 80026d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026d8:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026de:	f7ff ff45 	bl	800256c <ts_formatlength>
 80026e2:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 80026e4:	466b      	mov	r3, sp
 80026e6:	461e      	mov	r6, r3
		char buf[length];
 80026e8:	6979      	ldr	r1, [r7, #20]
 80026ea:	1e4b      	subs	r3, r1, #1
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	460b      	mov	r3, r1
 80026f0:	461a      	mov	r2, r3
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80026fa:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80026fe:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8002702:	460b      	mov	r3, r1
 8002704:	461a      	mov	r2, r3
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	00dd      	lsls	r5, r3, #3
 800270c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002710:	00d4      	lsls	r4, r2, #3
 8002712:	460b      	mov	r3, r1
 8002714:	3307      	adds	r3, #7
 8002716:	08db      	lsrs	r3, r3, #3
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	ebad 0d03 	sub.w	sp, sp, r3
 800271e:	466b      	mov	r3, sp
 8002720:	3300      	adds	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 8002724:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002728:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fe84 	bl	800243e <ts_formatstring>
 8002736:	6178      	str	r0, [r7, #20]
		length = _write(stream->_file, buf, length);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800273e:	4618      	mov	r0, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4619      	mov	r1, r3
 8002746:	f001 f8ef 	bl	8003928 <_write>
 800274a:	6178      	str	r0, [r7, #20]
 800274c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800274e:	697b      	ldr	r3, [r7, #20]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800275a:	b003      	add	sp, #12
 800275c:	4770      	bx	lr
	...

08002760 <__assert_func>:
 8002760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002762:	461c      	mov	r4, r3
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <__assert_func+0x2c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4605      	mov	r5, r0
 800276a:	68d8      	ldr	r0, [r3, #12]
 800276c:	b152      	cbz	r2, 8002784 <__assert_func+0x24>
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <__assert_func+0x30>)
 8002770:	9202      	str	r2, [sp, #8]
 8002772:	e88d 000a 	stmia.w	sp, {r1, r3}
 8002776:	4622      	mov	r2, r4
 8002778:	462b      	mov	r3, r5
 800277a:	4906      	ldr	r1, [pc, #24]	; (8002794 <__assert_func+0x34>)
 800277c:	f7ff ffa2 	bl	80026c4 <fiprintf>
 8002780:	f000 f830 	bl	80027e4 <abort>
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__assert_func+0x38>)
 8002786:	461a      	mov	r2, r3
 8002788:	e7f2      	b.n	8002770 <__assert_func+0x10>
 800278a:	bf00      	nop
 800278c:	20000020 	.word	0x20000020
 8002790:	080039b0 	.word	0x080039b0
 8002794:	080039bd 	.word	0x080039bd
 8002798:	080039eb 	.word	0x080039eb

0800279c <__libc_init_array>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	4e0d      	ldr	r6, [pc, #52]	; (80027d4 <__libc_init_array+0x38>)
 80027a0:	4c0d      	ldr	r4, [pc, #52]	; (80027d8 <__libc_init_array+0x3c>)
 80027a2:	1ba4      	subs	r4, r4, r6
 80027a4:	10a4      	asrs	r4, r4, #2
 80027a6:	2500      	movs	r5, #0
 80027a8:	42a5      	cmp	r5, r4
 80027aa:	d109      	bne.n	80027c0 <__libc_init_array+0x24>
 80027ac:	4e0b      	ldr	r6, [pc, #44]	; (80027dc <__libc_init_array+0x40>)
 80027ae:	4c0c      	ldr	r4, [pc, #48]	; (80027e0 <__libc_init_array+0x44>)
 80027b0:	f001 f8c4 	bl	800393c <_init>
 80027b4:	1ba4      	subs	r4, r4, r6
 80027b6:	10a4      	asrs	r4, r4, #2
 80027b8:	2500      	movs	r5, #0
 80027ba:	42a5      	cmp	r5, r4
 80027bc:	d105      	bne.n	80027ca <__libc_init_array+0x2e>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027c4:	4798      	blx	r3
 80027c6:	3501      	adds	r5, #1
 80027c8:	e7ee      	b.n	80027a8 <__libc_init_array+0xc>
 80027ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027ce:	4798      	blx	r3
 80027d0:	3501      	adds	r5, #1
 80027d2:	e7f2      	b.n	80027ba <__libc_init_array+0x1e>
 80027d4:	08003bc8 	.word	0x08003bc8
 80027d8:	08003bc8 	.word	0x08003bc8
 80027dc:	08003bc8 	.word	0x08003bc8
 80027e0:	08003bcc 	.word	0x08003bcc

080027e4 <abort>:
 80027e4:	b508      	push	{r3, lr}
 80027e6:	2006      	movs	r0, #6
 80027e8:	f000 f82c 	bl	8002844 <raise>
 80027ec:	2001      	movs	r0, #1
 80027ee:	f001 f8a3 	bl	8003938 <_exit>

080027f2 <_raise_r>:
 80027f2:	291f      	cmp	r1, #31
 80027f4:	b538      	push	{r3, r4, r5, lr}
 80027f6:	4604      	mov	r4, r0
 80027f8:	460d      	mov	r5, r1
 80027fa:	d904      	bls.n	8002806 <_raise_r+0x14>
 80027fc:	2316      	movs	r3, #22
 80027fe:	6003      	str	r3, [r0, #0]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002804:	bd38      	pop	{r3, r4, r5, pc}
 8002806:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002808:	b112      	cbz	r2, 8002810 <_raise_r+0x1e>
 800280a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800280e:	b94b      	cbnz	r3, 8002824 <_raise_r+0x32>
 8002810:	4620      	mov	r0, r4
 8002812:	f000 f831 	bl	8002878 <_getpid_r>
 8002816:	462a      	mov	r2, r5
 8002818:	4601      	mov	r1, r0
 800281a:	4620      	mov	r0, r4
 800281c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002820:	f000 b818 	b.w	8002854 <_kill_r>
 8002824:	2b01      	cmp	r3, #1
 8002826:	d00a      	beq.n	800283e <_raise_r+0x4c>
 8002828:	1c59      	adds	r1, r3, #1
 800282a:	d103      	bne.n	8002834 <_raise_r+0x42>
 800282c:	2316      	movs	r3, #22
 800282e:	6003      	str	r3, [r0, #0]
 8002830:	2001      	movs	r0, #1
 8002832:	bd38      	pop	{r3, r4, r5, pc}
 8002834:	2400      	movs	r4, #0
 8002836:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800283a:	4628      	mov	r0, r5
 800283c:	4798      	blx	r3
 800283e:	2000      	movs	r0, #0
 8002840:	bd38      	pop	{r3, r4, r5, pc}
	...

08002844 <raise>:
 8002844:	4b02      	ldr	r3, [pc, #8]	; (8002850 <raise+0xc>)
 8002846:	4601      	mov	r1, r0
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	f7ff bfd2 	b.w	80027f2 <_raise_r>
 800284e:	bf00      	nop
 8002850:	20000020 	.word	0x20000020

08002854 <_kill_r>:
 8002854:	b538      	push	{r3, r4, r5, lr}
 8002856:	4c07      	ldr	r4, [pc, #28]	; (8002874 <_kill_r+0x20>)
 8002858:	2300      	movs	r3, #0
 800285a:	4605      	mov	r5, r0
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	6023      	str	r3, [r4, #0]
 8002862:	f001 f859 	bl	8003918 <_kill>
 8002866:	1c43      	adds	r3, r0, #1
 8002868:	d102      	bne.n	8002870 <_kill_r+0x1c>
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	b103      	cbz	r3, 8002870 <_kill_r+0x1c>
 800286e:	602b      	str	r3, [r5, #0]
 8002870:	bd38      	pop	{r3, r4, r5, pc}
 8002872:	bf00      	nop
 8002874:	20001180 	.word	0x20001180

08002878 <_getpid_r>:
 8002878:	f001 b846 	b.w	8003908 <_getpid>
 800287c:	0000      	movs	r0, r0
	...

08002880 <sin>:
 8002880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002882:	ec51 0b10 	vmov	r0, r1, d0
 8002886:	4a20      	ldr	r2, [pc, #128]	; (8002908 <sin+0x88>)
 8002888:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800288c:	4293      	cmp	r3, r2
 800288e:	dc07      	bgt.n	80028a0 <sin+0x20>
 8002890:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002900 <sin+0x80>
 8002894:	2000      	movs	r0, #0
 8002896:	f000 fe67 	bl	8003568 <__kernel_sin>
 800289a:	ec51 0b10 	vmov	r0, r1, d0
 800289e:	e007      	b.n	80028b0 <sin+0x30>
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <sin+0x8c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	dd09      	ble.n	80028ba <sin+0x3a>
 80028a6:	ee10 2a10 	vmov	r2, s0
 80028aa:	460b      	mov	r3, r1
 80028ac:	f7fd fc98 	bl	80001e0 <__aeabi_dsub>
 80028b0:	ec41 0b10 	vmov	d0, r0, r1
 80028b4:	b005      	add	sp, #20
 80028b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80028ba:	4668      	mov	r0, sp
 80028bc:	f000 f828 	bl	8002910 <__ieee754_rem_pio2>
 80028c0:	f000 0003 	and.w	r0, r0, #3
 80028c4:	2801      	cmp	r0, #1
 80028c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80028ca:	ed9d 0b00 	vldr	d0, [sp]
 80028ce:	d004      	beq.n	80028da <sin+0x5a>
 80028d0:	2802      	cmp	r0, #2
 80028d2:	d005      	beq.n	80028e0 <sin+0x60>
 80028d4:	b970      	cbnz	r0, 80028f4 <sin+0x74>
 80028d6:	2001      	movs	r0, #1
 80028d8:	e7dd      	b.n	8002896 <sin+0x16>
 80028da:	f000 fa0d 	bl	8002cf8 <__kernel_cos>
 80028de:	e7dc      	b.n	800289a <sin+0x1a>
 80028e0:	2001      	movs	r0, #1
 80028e2:	f000 fe41 	bl	8003568 <__kernel_sin>
 80028e6:	ec53 2b10 	vmov	r2, r3, d0
 80028ea:	ee10 0a10 	vmov	r0, s0
 80028ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80028f2:	e7dd      	b.n	80028b0 <sin+0x30>
 80028f4:	f000 fa00 	bl	8002cf8 <__kernel_cos>
 80028f8:	e7f5      	b.n	80028e6 <sin+0x66>
 80028fa:	bf00      	nop
 80028fc:	f3af 8000 	nop.w
	...
 8002908:	3fe921fb 	.word	0x3fe921fb
 800290c:	7fefffff 	.word	0x7fefffff

08002910 <__ieee754_rem_pio2>:
 8002910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002914:	ec57 6b10 	vmov	r6, r7, d0
 8002918:	4bc3      	ldr	r3, [pc, #780]	; (8002c28 <__ieee754_rem_pio2+0x318>)
 800291a:	b08d      	sub	sp, #52	; 0x34
 800291c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8002920:	4598      	cmp	r8, r3
 8002922:	4604      	mov	r4, r0
 8002924:	9704      	str	r7, [sp, #16]
 8002926:	dc07      	bgt.n	8002938 <__ieee754_rem_pio2+0x28>
 8002928:	2200      	movs	r2, #0
 800292a:	2300      	movs	r3, #0
 800292c:	ed84 0b00 	vstr	d0, [r4]
 8002930:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8002934:	2500      	movs	r5, #0
 8002936:	e027      	b.n	8002988 <__ieee754_rem_pio2+0x78>
 8002938:	4bbc      	ldr	r3, [pc, #752]	; (8002c2c <__ieee754_rem_pio2+0x31c>)
 800293a:	4598      	cmp	r8, r3
 800293c:	dc75      	bgt.n	8002a2a <__ieee754_rem_pio2+0x11a>
 800293e:	9b04      	ldr	r3, [sp, #16]
 8002940:	4dbb      	ldr	r5, [pc, #748]	; (8002c30 <__ieee754_rem_pio2+0x320>)
 8002942:	2b00      	cmp	r3, #0
 8002944:	ee10 0a10 	vmov	r0, s0
 8002948:	a3a9      	add	r3, pc, #676	; (adr r3, 8002bf0 <__ieee754_rem_pio2+0x2e0>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	4639      	mov	r1, r7
 8002950:	dd36      	ble.n	80029c0 <__ieee754_rem_pio2+0xb0>
 8002952:	f7fd fc45 	bl	80001e0 <__aeabi_dsub>
 8002956:	45a8      	cmp	r8, r5
 8002958:	4606      	mov	r6, r0
 800295a:	460f      	mov	r7, r1
 800295c:	d018      	beq.n	8002990 <__ieee754_rem_pio2+0x80>
 800295e:	a3a6      	add	r3, pc, #664	; (adr r3, 8002bf8 <__ieee754_rem_pio2+0x2e8>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fc3c 	bl	80001e0 <__aeabi_dsub>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	e9c4 2300 	strd	r2, r3, [r4]
 8002970:	4630      	mov	r0, r6
 8002972:	4639      	mov	r1, r7
 8002974:	f7fd fc34 	bl	80001e0 <__aeabi_dsub>
 8002978:	a39f      	add	r3, pc, #636	; (adr r3, 8002bf8 <__ieee754_rem_pio2+0x2e8>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fd fc2f 	bl	80001e0 <__aeabi_dsub>
 8002982:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002986:	2501      	movs	r5, #1
 8002988:	4628      	mov	r0, r5
 800298a:	b00d      	add	sp, #52	; 0x34
 800298c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002990:	a39b      	add	r3, pc, #620	; (adr r3, 8002c00 <__ieee754_rem_pio2+0x2f0>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fc23 	bl	80001e0 <__aeabi_dsub>
 800299a:	a39b      	add	r3, pc, #620	; (adr r3, 8002c08 <__ieee754_rem_pio2+0x2f8>)
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	4606      	mov	r6, r0
 80029a2:	460f      	mov	r7, r1
 80029a4:	f7fd fc1c 	bl	80001e0 <__aeabi_dsub>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	e9c4 2300 	strd	r2, r3, [r4]
 80029b0:	4630      	mov	r0, r6
 80029b2:	4639      	mov	r1, r7
 80029b4:	f7fd fc14 	bl	80001e0 <__aeabi_dsub>
 80029b8:	a393      	add	r3, pc, #588	; (adr r3, 8002c08 <__ieee754_rem_pio2+0x2f8>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	e7de      	b.n	800297e <__ieee754_rem_pio2+0x6e>
 80029c0:	f7fd fc10 	bl	80001e4 <__adddf3>
 80029c4:	45a8      	cmp	r8, r5
 80029c6:	4606      	mov	r6, r0
 80029c8:	460f      	mov	r7, r1
 80029ca:	d016      	beq.n	80029fa <__ieee754_rem_pio2+0xea>
 80029cc:	a38a      	add	r3, pc, #552	; (adr r3, 8002bf8 <__ieee754_rem_pio2+0x2e8>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fd fc07 	bl	80001e4 <__adddf3>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	e9c4 2300 	strd	r2, r3, [r4]
 80029de:	4630      	mov	r0, r6
 80029e0:	4639      	mov	r1, r7
 80029e2:	f7fd fbfd 	bl	80001e0 <__aeabi_dsub>
 80029e6:	a384      	add	r3, pc, #528	; (adr r3, 8002bf8 <__ieee754_rem_pio2+0x2e8>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fbfa 	bl	80001e4 <__adddf3>
 80029f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80029f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80029f8:	e7c6      	b.n	8002988 <__ieee754_rem_pio2+0x78>
 80029fa:	a381      	add	r3, pc, #516	; (adr r3, 8002c00 <__ieee754_rem_pio2+0x2f0>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fbf0 	bl	80001e4 <__adddf3>
 8002a04:	a380      	add	r3, pc, #512	; (adr r3, 8002c08 <__ieee754_rem_pio2+0x2f8>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	4606      	mov	r6, r0
 8002a0c:	460f      	mov	r7, r1
 8002a0e:	f7fd fbe9 	bl	80001e4 <__adddf3>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	e9c4 2300 	strd	r2, r3, [r4]
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	4639      	mov	r1, r7
 8002a1e:	f7fd fbdf 	bl	80001e0 <__aeabi_dsub>
 8002a22:	a379      	add	r3, pc, #484	; (adr r3, 8002c08 <__ieee754_rem_pio2+0x2f8>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	e7e0      	b.n	80029ec <__ieee754_rem_pio2+0xdc>
 8002a2a:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <__ieee754_rem_pio2+0x324>)
 8002a2c:	4598      	cmp	r8, r3
 8002a2e:	f300 80d0 	bgt.w	8002bd2 <__ieee754_rem_pio2+0x2c2>
 8002a32:	f000 fe53 	bl	80036dc <fabs>
 8002a36:	ec57 6b10 	vmov	r6, r7, d0
 8002a3a:	ee10 0a10 	vmov	r0, s0
 8002a3e:	a374      	add	r3, pc, #464	; (adr r3, 8002c10 <__ieee754_rem_pio2+0x300>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	4639      	mov	r1, r7
 8002a46:	f7fd fd7f 	bl	8000548 <__aeabi_dmul>
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	4b7a      	ldr	r3, [pc, #488]	; (8002c38 <__ieee754_rem_pio2+0x328>)
 8002a4e:	f7fd fbc9 	bl	80001e4 <__adddf3>
 8002a52:	f7fe f813 	bl	8000a7c <__aeabi_d2iz>
 8002a56:	4605      	mov	r5, r0
 8002a58:	f7fd fd10 	bl	800047c <__aeabi_i2d>
 8002a5c:	a364      	add	r3, pc, #400	; (adr r3, 8002bf0 <__ieee754_rem_pio2+0x2e0>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a66:	f7fd fd6f 	bl	8000548 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4630      	mov	r0, r6
 8002a70:	4639      	mov	r1, r7
 8002a72:	f7fd fbb5 	bl	80001e0 <__aeabi_dsub>
 8002a76:	a360      	add	r3, pc, #384	; (adr r3, 8002bf8 <__ieee754_rem_pio2+0x2e8>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	4682      	mov	sl, r0
 8002a7e:	468b      	mov	fp, r1
 8002a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a84:	f7fd fd60 	bl	8000548 <__aeabi_dmul>
 8002a88:	2d1f      	cmp	r5, #31
 8002a8a:	4606      	mov	r6, r0
 8002a8c:	460f      	mov	r7, r1
 8002a8e:	dc2a      	bgt.n	8002ae6 <__ieee754_rem_pio2+0x1d6>
 8002a90:	1e6a      	subs	r2, r5, #1
 8002a92:	4b6a      	ldr	r3, [pc, #424]	; (8002c3c <__ieee754_rem_pio2+0x32c>)
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	4598      	cmp	r8, r3
 8002a9a:	d024      	beq.n	8002ae6 <__ieee754_rem_pio2+0x1d6>
 8002a9c:	4632      	mov	r2, r6
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	4650      	mov	r0, sl
 8002aa2:	4659      	mov	r1, fp
 8002aa4:	f7fd fb9c 	bl	80001e0 <__aeabi_dsub>
 8002aa8:	e9c4 0100 	strd	r0, r1, [r4]
 8002aac:	e9d4 8900 	ldrd	r8, r9, [r4]
 8002ab0:	4650      	mov	r0, sl
 8002ab2:	4642      	mov	r2, r8
 8002ab4:	464b      	mov	r3, r9
 8002ab6:	4659      	mov	r1, fp
 8002ab8:	f7fd fb92 	bl	80001e0 <__aeabi_dsub>
 8002abc:	463b      	mov	r3, r7
 8002abe:	4632      	mov	r2, r6
 8002ac0:	f7fd fb8e 	bl	80001e0 <__aeabi_dsub>
 8002ac4:	9b04      	ldr	r3, [sp, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002acc:	f6bf af5c 	bge.w	8002988 <__ieee754_rem_pio2+0x78>
 8002ad0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002ad4:	6063      	str	r3, [r4, #4]
 8002ad6:	f8c4 8000 	str.w	r8, [r4]
 8002ada:	60a0      	str	r0, [r4, #8]
 8002adc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002ae0:	60e3      	str	r3, [r4, #12]
 8002ae2:	426d      	negs	r5, r5
 8002ae4:	e750      	b.n	8002988 <__ieee754_rem_pio2+0x78>
 8002ae6:	4632      	mov	r2, r6
 8002ae8:	463b      	mov	r3, r7
 8002aea:	4650      	mov	r0, sl
 8002aec:	4659      	mov	r1, fp
 8002aee:	f7fd fb77 	bl	80001e0 <__aeabi_dsub>
 8002af2:	ea4f 5228 	mov.w	r2, r8, asr #20
 8002af6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	e9c4 0100 	strd	r0, r1, [r4]
 8002b02:	9205      	str	r2, [sp, #20]
 8002b04:	ddd2      	ble.n	8002aac <__ieee754_rem_pio2+0x19c>
 8002b06:	a33e      	add	r3, pc, #248	; (adr r3, 8002c00 <__ieee754_rem_pio2+0x2f0>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b10:	f7fd fd1a 	bl	8000548 <__aeabi_dmul>
 8002b14:	4606      	mov	r6, r0
 8002b16:	460f      	mov	r7, r1
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4650      	mov	r0, sl
 8002b1e:	4659      	mov	r1, fp
 8002b20:	f7fd fb5e 	bl	80001e0 <__aeabi_dsub>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4680      	mov	r8, r0
 8002b2a:	4689      	mov	r9, r1
 8002b2c:	4650      	mov	r0, sl
 8002b2e:	4659      	mov	r1, fp
 8002b30:	f7fd fb56 	bl	80001e0 <__aeabi_dsub>
 8002b34:	4632      	mov	r2, r6
 8002b36:	463b      	mov	r3, r7
 8002b38:	f7fd fb52 	bl	80001e0 <__aeabi_dsub>
 8002b3c:	a332      	add	r3, pc, #200	; (adr r3, 8002c08 <__ieee754_rem_pio2+0x2f8>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	4606      	mov	r6, r0
 8002b44:	460f      	mov	r7, r1
 8002b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b4a:	f7fd fcfd 	bl	8000548 <__aeabi_dmul>
 8002b4e:	4632      	mov	r2, r6
 8002b50:	463b      	mov	r3, r7
 8002b52:	f7fd fb45 	bl	80001e0 <__aeabi_dsub>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	460f      	mov	r7, r1
 8002b5e:	4640      	mov	r0, r8
 8002b60:	4649      	mov	r1, r9
 8002b62:	f7fd fb3d 	bl	80001e0 <__aeabi_dsub>
 8002b66:	9a05      	ldr	r2, [sp, #20]
 8002b68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b31      	cmp	r3, #49	; 0x31
 8002b70:	e9c4 0100 	strd	r0, r1, [r4]
 8002b74:	dd2a      	ble.n	8002bcc <__ieee754_rem_pio2+0x2bc>
 8002b76:	a328      	add	r3, pc, #160	; (adr r3, 8002c18 <__ieee754_rem_pio2+0x308>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b80:	f7fd fce2 	bl	8000548 <__aeabi_dmul>
 8002b84:	4606      	mov	r6, r0
 8002b86:	460f      	mov	r7, r1
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	4649      	mov	r1, r9
 8002b90:	f7fd fb26 	bl	80001e0 <__aeabi_dsub>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4682      	mov	sl, r0
 8002b9a:	468b      	mov	fp, r1
 8002b9c:	4640      	mov	r0, r8
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	f7fd fb1e 	bl	80001e0 <__aeabi_dsub>
 8002ba4:	4632      	mov	r2, r6
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	f7fd fb1a 	bl	80001e0 <__aeabi_dsub>
 8002bac:	a31c      	add	r3, pc, #112	; (adr r3, 8002c20 <__ieee754_rem_pio2+0x310>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	460f      	mov	r7, r1
 8002bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bba:	f7fd fcc5 	bl	8000548 <__aeabi_dmul>
 8002bbe:	4632      	mov	r2, r6
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	f7fd fb0d 	bl	80001e0 <__aeabi_dsub>
 8002bc6:	4606      	mov	r6, r0
 8002bc8:	460f      	mov	r7, r1
 8002bca:	e767      	b.n	8002a9c <__ieee754_rem_pio2+0x18c>
 8002bcc:	46c2      	mov	sl, r8
 8002bce:	46cb      	mov	fp, r9
 8002bd0:	e76c      	b.n	8002aac <__ieee754_rem_pio2+0x19c>
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <__ieee754_rem_pio2+0x330>)
 8002bd4:	4598      	cmp	r8, r3
 8002bd6:	dd35      	ble.n	8002c44 <__ieee754_rem_pio2+0x334>
 8002bd8:	ee10 2a10 	vmov	r2, s0
 8002bdc:	463b      	mov	r3, r7
 8002bde:	4630      	mov	r0, r6
 8002be0:	4639      	mov	r1, r7
 8002be2:	f7fd fafd 	bl	80001e0 <__aeabi_dsub>
 8002be6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002bea:	e9c4 0100 	strd	r0, r1, [r4]
 8002bee:	e6a1      	b.n	8002934 <__ieee754_rem_pio2+0x24>
 8002bf0:	54400000 	.word	0x54400000
 8002bf4:	3ff921fb 	.word	0x3ff921fb
 8002bf8:	1a626331 	.word	0x1a626331
 8002bfc:	3dd0b461 	.word	0x3dd0b461
 8002c00:	1a600000 	.word	0x1a600000
 8002c04:	3dd0b461 	.word	0x3dd0b461
 8002c08:	2e037073 	.word	0x2e037073
 8002c0c:	3ba3198a 	.word	0x3ba3198a
 8002c10:	6dc9c883 	.word	0x6dc9c883
 8002c14:	3fe45f30 	.word	0x3fe45f30
 8002c18:	2e000000 	.word	0x2e000000
 8002c1c:	3ba3198a 	.word	0x3ba3198a
 8002c20:	252049c1 	.word	0x252049c1
 8002c24:	397b839a 	.word	0x397b839a
 8002c28:	3fe921fb 	.word	0x3fe921fb
 8002c2c:	4002d97b 	.word	0x4002d97b
 8002c30:	3ff921fb 	.word	0x3ff921fb
 8002c34:	413921fb 	.word	0x413921fb
 8002c38:	3fe00000 	.word	0x3fe00000
 8002c3c:	080039ec 	.word	0x080039ec
 8002c40:	7fefffff 	.word	0x7fefffff
 8002c44:	ea4f 5528 	mov.w	r5, r8, asr #20
 8002c48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8002c4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8002c50:	4630      	mov	r0, r6
 8002c52:	460f      	mov	r7, r1
 8002c54:	f7fd ff12 	bl	8000a7c <__aeabi_d2iz>
 8002c58:	f7fd fc10 	bl	800047c <__aeabi_i2d>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4630      	mov	r0, r6
 8002c62:	4639      	mov	r1, r7
 8002c64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c68:	f7fd faba 	bl	80001e0 <__aeabi_dsub>
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <__ieee754_rem_pio2+0x3dc>)
 8002c70:	f7fd fc6a 	bl	8000548 <__aeabi_dmul>
 8002c74:	460f      	mov	r7, r1
 8002c76:	4606      	mov	r6, r0
 8002c78:	f7fd ff00 	bl	8000a7c <__aeabi_d2iz>
 8002c7c:	f7fd fbfe 	bl	800047c <__aeabi_i2d>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4630      	mov	r0, r6
 8002c86:	4639      	mov	r1, r7
 8002c88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002c8c:	f7fd faa8 	bl	80001e0 <__aeabi_dsub>
 8002c90:	2200      	movs	r2, #0
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <__ieee754_rem_pio2+0x3dc>)
 8002c94:	f7fd fc58 	bl	8000548 <__aeabi_dmul>
 8002c98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002c9c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002ca0:	f04f 0803 	mov.w	r8, #3
 8002ca4:	2600      	movs	r6, #0
 8002ca6:	2700      	movs	r7, #0
 8002ca8:	4632      	mov	r2, r6
 8002caa:	463b      	mov	r3, r7
 8002cac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8002cb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8002cb4:	f7fd feb0 	bl	8000a18 <__aeabi_dcmpeq>
 8002cb8:	b9b0      	cbnz	r0, 8002ce8 <__ieee754_rem_pio2+0x3d8>
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <__ieee754_rem_pio2+0x3e0>)
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	462a      	mov	r2, r5
 8002cc4:	4643      	mov	r3, r8
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	a806      	add	r0, sp, #24
 8002cca:	f000 f8fd 	bl	8002ec8 <__kernel_rem_pio2>
 8002cce:	9b04      	ldr	r3, [sp, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	4605      	mov	r5, r0
 8002cd4:	f6bf ae58 	bge.w	8002988 <__ieee754_rem_pio2+0x78>
 8002cd8:	6863      	ldr	r3, [r4, #4]
 8002cda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002cde:	6063      	str	r3, [r4, #4]
 8002ce0:	68e3      	ldr	r3, [r4, #12]
 8002ce2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002ce6:	e6fb      	b.n	8002ae0 <__ieee754_rem_pio2+0x1d0>
 8002ce8:	46d0      	mov	r8, sl
 8002cea:	e7dd      	b.n	8002ca8 <__ieee754_rem_pio2+0x398>
 8002cec:	41700000 	.word	0x41700000
 8002cf0:	08003a6c 	.word	0x08003a6c
 8002cf4:	00000000 	.word	0x00000000

08002cf8 <__kernel_cos>:
 8002cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfc:	ec59 8b10 	vmov	r8, r9, d0
 8002d00:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8002d04:	b085      	sub	sp, #20
 8002d06:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8002d0a:	ed8d 1b00 	vstr	d1, [sp]
 8002d0e:	da07      	bge.n	8002d20 <__kernel_cos+0x28>
 8002d10:	ee10 0a10 	vmov	r0, s0
 8002d14:	4649      	mov	r1, r9
 8002d16:	f7fd feb1 	bl	8000a7c <__aeabi_d2iz>
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	f000 80aa 	beq.w	8002e74 <__kernel_cos+0x17c>
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	4640      	mov	r0, r8
 8002d26:	4649      	mov	r1, r9
 8002d28:	f7fd fc0e 	bl	8000548 <__aeabi_dmul>
 8002d2c:	a359      	add	r3, pc, #356	; (adr r3, 8002e94 <__kernel_cos+0x19c>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	4604      	mov	r4, r0
 8002d34:	460d      	mov	r5, r1
 8002d36:	f7fd fc07 	bl	8000548 <__aeabi_dmul>
 8002d3a:	a358      	add	r3, pc, #352	; (adr r3, 8002e9c <__kernel_cos+0x1a4>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f7fd fa50 	bl	80001e4 <__adddf3>
 8002d44:	4622      	mov	r2, r4
 8002d46:	462b      	mov	r3, r5
 8002d48:	f7fd fbfe 	bl	8000548 <__aeabi_dmul>
 8002d4c:	a355      	add	r3, pc, #340	; (adr r3, 8002ea4 <__kernel_cos+0x1ac>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd fa45 	bl	80001e0 <__aeabi_dsub>
 8002d56:	4622      	mov	r2, r4
 8002d58:	462b      	mov	r3, r5
 8002d5a:	f7fd fbf5 	bl	8000548 <__aeabi_dmul>
 8002d5e:	a353      	add	r3, pc, #332	; (adr r3, 8002eac <__kernel_cos+0x1b4>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f7fd fa3e 	bl	80001e4 <__adddf3>
 8002d68:	4622      	mov	r2, r4
 8002d6a:	462b      	mov	r3, r5
 8002d6c:	f7fd fbec 	bl	8000548 <__aeabi_dmul>
 8002d70:	a350      	add	r3, pc, #320	; (adr r3, 8002eb4 <__kernel_cos+0x1bc>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f7fd fa33 	bl	80001e0 <__aeabi_dsub>
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	462b      	mov	r3, r5
 8002d7e:	f7fd fbe3 	bl	8000548 <__aeabi_dmul>
 8002d82:	a34e      	add	r3, pc, #312	; (adr r3, 8002ebc <__kernel_cos+0x1c4>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	f7fd fa2c 	bl	80001e4 <__adddf3>
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	4622      	mov	r2, r4
 8002d90:	f7fd fbda 	bl	8000548 <__aeabi_dmul>
 8002d94:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <__kernel_cos+0x188>)
 8002d96:	429f      	cmp	r7, r3
 8002d98:	4682      	mov	sl, r0
 8002d9a:	468b      	mov	fp, r1
 8002d9c:	dc2c      	bgt.n	8002df8 <__kernel_cos+0x100>
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <__kernel_cos+0x18c>)
 8002da2:	4620      	mov	r0, r4
 8002da4:	4629      	mov	r1, r5
 8002da6:	f7fd fbcf 	bl	8000548 <__aeabi_dmul>
 8002daa:	4652      	mov	r2, sl
 8002dac:	4606      	mov	r6, r0
 8002dae:	460f      	mov	r7, r1
 8002db0:	465b      	mov	r3, fp
 8002db2:	4620      	mov	r0, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	f7fd fbc7 	bl	8000548 <__aeabi_dmul>
 8002dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	460d      	mov	r5, r1
 8002dc2:	4640      	mov	r0, r8
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	f7fd fbbf 	bl	8000548 <__aeabi_dmul>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4620      	mov	r0, r4
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	f7fd fa05 	bl	80001e0 <__aeabi_dsub>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4630      	mov	r0, r6
 8002ddc:	4639      	mov	r1, r7
 8002dde:	f7fd f9ff 	bl	80001e0 <__aeabi_dsub>
 8002de2:	460b      	mov	r3, r1
 8002de4:	4928      	ldr	r1, [pc, #160]	; (8002e88 <__kernel_cos+0x190>)
 8002de6:	4602      	mov	r2, r0
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fd f9f9 	bl	80001e0 <__aeabi_dsub>
 8002dee:	ec41 0b10 	vmov	d0, r0, r1
 8002df2:	b005      	add	sp, #20
 8002df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <__kernel_cos+0x194>)
 8002dfa:	4923      	ldr	r1, [pc, #140]	; (8002e88 <__kernel_cos+0x190>)
 8002dfc:	429f      	cmp	r7, r3
 8002dfe:	bfd7      	itett	le
 8002e00:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8002e04:	4f22      	ldrgt	r7, [pc, #136]	; (8002e90 <__kernel_cos+0x198>)
 8002e06:	2200      	movle	r2, #0
 8002e08:	4616      	movle	r6, r2
 8002e0a:	bfd4      	ite	le
 8002e0c:	461f      	movle	r7, r3
 8002e0e:	2600      	movgt	r6, #0
 8002e10:	4632      	mov	r2, r6
 8002e12:	463b      	mov	r3, r7
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd f9e3 	bl	80001e0 <__aeabi_dsub>
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <__kernel_cos+0x18c>)
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd fb8f 	bl	8000548 <__aeabi_dmul>
 8002e2a:	4632      	mov	r2, r6
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	f7fd f9d7 	bl	80001e0 <__aeabi_dsub>
 8002e32:	4652      	mov	r2, sl
 8002e34:	4606      	mov	r6, r0
 8002e36:	460f      	mov	r7, r1
 8002e38:	465b      	mov	r3, fp
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	f7fd fb83 	bl	8000548 <__aeabi_dmul>
 8002e42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e46:	4604      	mov	r4, r0
 8002e48:	460d      	mov	r5, r1
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	f7fd fb7b 	bl	8000548 <__aeabi_dmul>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4620      	mov	r0, r4
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f7fd f9c1 	bl	80001e0 <__aeabi_dsub>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4630      	mov	r0, r6
 8002e64:	4639      	mov	r1, r7
 8002e66:	f7fd f9bb 	bl	80001e0 <__aeabi_dsub>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e72:	e7ba      	b.n	8002dea <__kernel_cos+0xf2>
 8002e74:	2000      	movs	r0, #0
 8002e76:	4904      	ldr	r1, [pc, #16]	; (8002e88 <__kernel_cos+0x190>)
 8002e78:	e7b9      	b.n	8002dee <__kernel_cos+0xf6>
 8002e7a:	bf00      	nop
 8002e7c:	f3af 8000 	nop.w
 8002e80:	3fd33332 	.word	0x3fd33332
 8002e84:	3fe00000 	.word	0x3fe00000
 8002e88:	3ff00000 	.word	0x3ff00000
 8002e8c:	3fe90000 	.word	0x3fe90000
 8002e90:	3fd20000 	.word	0x3fd20000
 8002e94:	be8838d4 	.word	0xbe8838d4
 8002e98:	bda8fae9 	.word	0xbda8fae9
 8002e9c:	bdb4b1c4 	.word	0xbdb4b1c4
 8002ea0:	3e21ee9e 	.word	0x3e21ee9e
 8002ea4:	809c52ad 	.word	0x809c52ad
 8002ea8:	3e927e4f 	.word	0x3e927e4f
 8002eac:	19cb1590 	.word	0x19cb1590
 8002eb0:	3efa01a0 	.word	0x3efa01a0
 8002eb4:	16c15177 	.word	0x16c15177
 8002eb8:	3f56c16c 	.word	0x3f56c16c
 8002ebc:	5555554c 	.word	0x5555554c
 8002ec0:	3fa55555 	.word	0x3fa55555
 8002ec4:	00000000 	.word	0x00000000

08002ec8 <__kernel_rem_pio2>:
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ecc:	ed2d 8b02 	vpush	{d8}
 8002ed0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8002ed4:	1ed4      	subs	r4, r2, #3
 8002ed6:	9306      	str	r3, [sp, #24]
 8002ed8:	9102      	str	r1, [sp, #8]
 8002eda:	4bc3      	ldr	r3, [pc, #780]	; (80031e8 <__kernel_rem_pio2+0x320>)
 8002edc:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8002ede:	9009      	str	r0, [sp, #36]	; 0x24
 8002ee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	9b06      	ldr	r3, [sp, #24]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	9304      	str	r3, [sp, #16]
 8002eec:	2318      	movs	r3, #24
 8002eee:	fb94 f4f3 	sdiv	r4, r4, r3
 8002ef2:	f06f 0317 	mvn.w	r3, #23
 8002ef6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002efa:	fb04 3303 	mla	r3, r4, r3, r3
 8002efe:	eb03 0a02 	add.w	sl, r3, r2
 8002f02:	9b00      	ldr	r3, [sp, #0]
 8002f04:	9a04      	ldr	r2, [sp, #16]
 8002f06:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80031d8 <__kernel_rem_pio2+0x310>
 8002f0a:	eb03 0802 	add.w	r8, r3, r2
 8002f0e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002f10:	1aa7      	subs	r7, r4, r2
 8002f12:	ae20      	add	r6, sp, #128	; 0x80
 8002f14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002f18:	2500      	movs	r5, #0
 8002f1a:	4545      	cmp	r5, r8
 8002f1c:	dd13      	ble.n	8002f46 <__kernel_rem_pio2+0x7e>
 8002f1e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80031d8 <__kernel_rem_pio2+0x310>
 8002f22:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8002f26:	2600      	movs	r6, #0
 8002f28:	9b00      	ldr	r3, [sp, #0]
 8002f2a:	429e      	cmp	r6, r3
 8002f2c:	dc32      	bgt.n	8002f94 <__kernel_rem_pio2+0xcc>
 8002f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f30:	9303      	str	r3, [sp, #12]
 8002f32:	9b06      	ldr	r3, [sp, #24]
 8002f34:	199d      	adds	r5, r3, r6
 8002f36:	ab20      	add	r3, sp, #128	; 0x80
 8002f38:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002f3c:	9308      	str	r3, [sp, #32]
 8002f3e:	ec59 8b18 	vmov	r8, r9, d8
 8002f42:	2700      	movs	r7, #0
 8002f44:	e01f      	b.n	8002f86 <__kernel_rem_pio2+0xbe>
 8002f46:	42ef      	cmn	r7, r5
 8002f48:	d407      	bmi.n	8002f5a <__kernel_rem_pio2+0x92>
 8002f4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002f4e:	f7fd fa95 	bl	800047c <__aeabi_i2d>
 8002f52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002f56:	3501      	adds	r5, #1
 8002f58:	e7df      	b.n	8002f1a <__kernel_rem_pio2+0x52>
 8002f5a:	ec51 0b18 	vmov	r0, r1, d8
 8002f5e:	e7f8      	b.n	8002f52 <__kernel_rem_pio2+0x8a>
 8002f60:	9908      	ldr	r1, [sp, #32]
 8002f62:	9d03      	ldr	r5, [sp, #12]
 8002f64:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002f68:	9108      	str	r1, [sp, #32]
 8002f6a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002f6e:	9503      	str	r5, [sp, #12]
 8002f70:	f7fd faea 	bl	8000548 <__aeabi_dmul>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4640      	mov	r0, r8
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	f7fd f932 	bl	80001e4 <__adddf3>
 8002f80:	3701      	adds	r7, #1
 8002f82:	4680      	mov	r8, r0
 8002f84:	4689      	mov	r9, r1
 8002f86:	9b04      	ldr	r3, [sp, #16]
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	dde9      	ble.n	8002f60 <__kernel_rem_pio2+0x98>
 8002f8c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8002f90:	3601      	adds	r6, #1
 8002f92:	e7c9      	b.n	8002f28 <__kernel_rem_pio2+0x60>
 8002f94:	9b00      	ldr	r3, [sp, #0]
 8002f96:	9f00      	ldr	r7, [sp, #0]
 8002f98:	aa0c      	add	r2, sp, #48	; 0x30
 8002f9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fa0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002fa2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8002fa8:	ab98      	add	r3, sp, #608	; 0x260
 8002faa:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8002fae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002fb2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002fb6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8002fba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fbe:	9308      	str	r3, [sp, #32]
 8002fc0:	9a08      	ldr	r2, [sp, #32]
 8002fc2:	ab98      	add	r3, sp, #608	; 0x260
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8002fca:	2600      	movs	r6, #0
 8002fcc:	1bbb      	subs	r3, r7, r6
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dc77      	bgt.n	80030c2 <__kernel_rem_pio2+0x1fa>
 8002fd2:	ec49 8b10 	vmov	d0, r8, r9
 8002fd6:	4650      	mov	r0, sl
 8002fd8:	f000 fc0e 	bl	80037f8 <scalbn>
 8002fdc:	ec55 4b10 	vmov	r4, r5, d0
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002fe6:	ee10 0a10 	vmov	r0, s0
 8002fea:	4629      	mov	r1, r5
 8002fec:	f7fd faac 	bl	8000548 <__aeabi_dmul>
 8002ff0:	ec41 0b10 	vmov	d0, r0, r1
 8002ff4:	f000 fb7c 	bl	80036f0 <floor>
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	ec51 0b10 	vmov	r0, r1, d0
 8002ffe:	4b7b      	ldr	r3, [pc, #492]	; (80031ec <__kernel_rem_pio2+0x324>)
 8003000:	f7fd faa2 	bl	8000548 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4620      	mov	r0, r4
 800300a:	4629      	mov	r1, r5
 800300c:	f7fd f8e8 	bl	80001e0 <__aeabi_dsub>
 8003010:	460d      	mov	r5, r1
 8003012:	4604      	mov	r4, r0
 8003014:	f7fd fd32 	bl	8000a7c <__aeabi_d2iz>
 8003018:	9003      	str	r0, [sp, #12]
 800301a:	f7fd fa2f 	bl	800047c <__aeabi_i2d>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4620      	mov	r0, r4
 8003024:	4629      	mov	r1, r5
 8003026:	f7fd f8db 	bl	80001e0 <__aeabi_dsub>
 800302a:	f1ba 0f00 	cmp.w	sl, #0
 800302e:	4680      	mov	r8, r0
 8003030:	4689      	mov	r9, r1
 8003032:	dd6b      	ble.n	800310c <__kernel_rem_pio2+0x244>
 8003034:	1e7a      	subs	r2, r7, #1
 8003036:	ab0c      	add	r3, sp, #48	; 0x30
 8003038:	f1ca 0118 	rsb	r1, sl, #24
 800303c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003040:	9c03      	ldr	r4, [sp, #12]
 8003042:	fa40 f301 	asr.w	r3, r0, r1
 8003046:	441c      	add	r4, r3
 8003048:	408b      	lsls	r3, r1
 800304a:	1ac0      	subs	r0, r0, r3
 800304c:	ab0c      	add	r3, sp, #48	; 0x30
 800304e:	9403      	str	r4, [sp, #12]
 8003050:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003054:	f1ca 0317 	rsb	r3, sl, #23
 8003058:	fa40 fb03 	asr.w	fp, r0, r3
 800305c:	f1bb 0f00 	cmp.w	fp, #0
 8003060:	dd62      	ble.n	8003128 <__kernel_rem_pio2+0x260>
 8003062:	9b03      	ldr	r3, [sp, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	3301      	adds	r3, #1
 8003068:	9303      	str	r3, [sp, #12]
 800306a:	4614      	mov	r4, r2
 800306c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003070:	4297      	cmp	r7, r2
 8003072:	f300 8089 	bgt.w	8003188 <__kernel_rem_pio2+0x2c0>
 8003076:	f1ba 0f00 	cmp.w	sl, #0
 800307a:	dd07      	ble.n	800308c <__kernel_rem_pio2+0x1c4>
 800307c:	f1ba 0f01 	cmp.w	sl, #1
 8003080:	f000 8096 	beq.w	80031b0 <__kernel_rem_pio2+0x2e8>
 8003084:	f1ba 0f02 	cmp.w	sl, #2
 8003088:	f000 809c 	beq.w	80031c4 <__kernel_rem_pio2+0x2fc>
 800308c:	f1bb 0f02 	cmp.w	fp, #2
 8003090:	d14a      	bne.n	8003128 <__kernel_rem_pio2+0x260>
 8003092:	4642      	mov	r2, r8
 8003094:	464b      	mov	r3, r9
 8003096:	2000      	movs	r0, #0
 8003098:	4955      	ldr	r1, [pc, #340]	; (80031f0 <__kernel_rem_pio2+0x328>)
 800309a:	f7fd f8a1 	bl	80001e0 <__aeabi_dsub>
 800309e:	4680      	mov	r8, r0
 80030a0:	4689      	mov	r9, r1
 80030a2:	2c00      	cmp	r4, #0
 80030a4:	d040      	beq.n	8003128 <__kernel_rem_pio2+0x260>
 80030a6:	4650      	mov	r0, sl
 80030a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80031e0 <__kernel_rem_pio2+0x318>
 80030ac:	f000 fba4 	bl	80037f8 <scalbn>
 80030b0:	4640      	mov	r0, r8
 80030b2:	4649      	mov	r1, r9
 80030b4:	ec53 2b10 	vmov	r2, r3, d0
 80030b8:	f7fd f892 	bl	80001e0 <__aeabi_dsub>
 80030bc:	4680      	mov	r8, r0
 80030be:	4689      	mov	r9, r1
 80030c0:	e032      	b.n	8003128 <__kernel_rem_pio2+0x260>
 80030c2:	2200      	movs	r2, #0
 80030c4:	4b4b      	ldr	r3, [pc, #300]	; (80031f4 <__kernel_rem_pio2+0x32c>)
 80030c6:	4640      	mov	r0, r8
 80030c8:	4649      	mov	r1, r9
 80030ca:	f7fd fa3d 	bl	8000548 <__aeabi_dmul>
 80030ce:	f7fd fcd5 	bl	8000a7c <__aeabi_d2iz>
 80030d2:	f7fd f9d3 	bl	800047c <__aeabi_i2d>
 80030d6:	2200      	movs	r2, #0
 80030d8:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <__kernel_rem_pio2+0x330>)
 80030da:	4604      	mov	r4, r0
 80030dc:	460d      	mov	r5, r1
 80030de:	f7fd fa33 	bl	8000548 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4640      	mov	r0, r8
 80030e8:	4649      	mov	r1, r9
 80030ea:	f7fd f879 	bl	80001e0 <__aeabi_dsub>
 80030ee:	f7fd fcc5 	bl	8000a7c <__aeabi_d2iz>
 80030f2:	ab0c      	add	r3, sp, #48	; 0x30
 80030f4:	4629      	mov	r1, r5
 80030f6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80030fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80030fe:	4620      	mov	r0, r4
 8003100:	f7fd f870 	bl	80001e4 <__adddf3>
 8003104:	3601      	adds	r6, #1
 8003106:	4680      	mov	r8, r0
 8003108:	4689      	mov	r9, r1
 800310a:	e75f      	b.n	8002fcc <__kernel_rem_pio2+0x104>
 800310c:	d106      	bne.n	800311c <__kernel_rem_pio2+0x254>
 800310e:	1e7b      	subs	r3, r7, #1
 8003110:	aa0c      	add	r2, sp, #48	; 0x30
 8003112:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003116:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800311a:	e79f      	b.n	800305c <__kernel_rem_pio2+0x194>
 800311c:	2200      	movs	r2, #0
 800311e:	4b37      	ldr	r3, [pc, #220]	; (80031fc <__kernel_rem_pio2+0x334>)
 8003120:	f7fd fc98 	bl	8000a54 <__aeabi_dcmpge>
 8003124:	bb68      	cbnz	r0, 8003182 <__kernel_rem_pio2+0x2ba>
 8003126:	4683      	mov	fp, r0
 8003128:	2200      	movs	r2, #0
 800312a:	2300      	movs	r3, #0
 800312c:	4640      	mov	r0, r8
 800312e:	4649      	mov	r1, r9
 8003130:	f7fd fc72 	bl	8000a18 <__aeabi_dcmpeq>
 8003134:	2800      	cmp	r0, #0
 8003136:	f000 80c1 	beq.w	80032bc <__kernel_rem_pio2+0x3f4>
 800313a:	1e7c      	subs	r4, r7, #1
 800313c:	4623      	mov	r3, r4
 800313e:	2200      	movs	r2, #0
 8003140:	9900      	ldr	r1, [sp, #0]
 8003142:	428b      	cmp	r3, r1
 8003144:	da5c      	bge.n	8003200 <__kernel_rem_pio2+0x338>
 8003146:	2a00      	cmp	r2, #0
 8003148:	f040 808b 	bne.w	8003262 <__kernel_rem_pio2+0x39a>
 800314c:	2401      	movs	r4, #1
 800314e:	f06f 0203 	mvn.w	r2, #3
 8003152:	fb02 f304 	mul.w	r3, r2, r4
 8003156:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003158:	58cb      	ldr	r3, [r1, r3]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d056      	beq.n	800320c <__kernel_rem_pio2+0x344>
 800315e:	9b08      	ldr	r3, [sp, #32]
 8003160:	aa98      	add	r2, sp, #608	; 0x260
 8003162:	4413      	add	r3, r2
 8003164:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8003168:	9b06      	ldr	r3, [sp, #24]
 800316a:	19dd      	adds	r5, r3, r7
 800316c:	ab20      	add	r3, sp, #128	; 0x80
 800316e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003172:	19e3      	adds	r3, r4, r7
 8003174:	1c7e      	adds	r6, r7, #1
 8003176:	9303      	str	r3, [sp, #12]
 8003178:	9b03      	ldr	r3, [sp, #12]
 800317a:	429e      	cmp	r6, r3
 800317c:	dd48      	ble.n	8003210 <__kernel_rem_pio2+0x348>
 800317e:	461f      	mov	r7, r3
 8003180:	e712      	b.n	8002fa8 <__kernel_rem_pio2+0xe0>
 8003182:	f04f 0b02 	mov.w	fp, #2
 8003186:	e76c      	b.n	8003062 <__kernel_rem_pio2+0x19a>
 8003188:	ab0c      	add	r3, sp, #48	; 0x30
 800318a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318e:	b94c      	cbnz	r4, 80031a4 <__kernel_rem_pio2+0x2dc>
 8003190:	b12b      	cbz	r3, 800319e <__kernel_rem_pio2+0x2d6>
 8003192:	a80c      	add	r0, sp, #48	; 0x30
 8003194:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003198:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800319c:	2301      	movs	r3, #1
 800319e:	3201      	adds	r2, #1
 80031a0:	461c      	mov	r4, r3
 80031a2:	e765      	b.n	8003070 <__kernel_rem_pio2+0x1a8>
 80031a4:	a80c      	add	r0, sp, #48	; 0x30
 80031a6:	1acb      	subs	r3, r1, r3
 80031a8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80031ac:	4623      	mov	r3, r4
 80031ae:	e7f6      	b.n	800319e <__kernel_rem_pio2+0x2d6>
 80031b0:	1e7a      	subs	r2, r7, #1
 80031b2:	ab0c      	add	r3, sp, #48	; 0x30
 80031b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80031bc:	a90c      	add	r1, sp, #48	; 0x30
 80031be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80031c2:	e763      	b.n	800308c <__kernel_rem_pio2+0x1c4>
 80031c4:	1e7a      	subs	r2, r7, #1
 80031c6:	ab0c      	add	r3, sp, #48	; 0x30
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80031d0:	e7f4      	b.n	80031bc <__kernel_rem_pio2+0x2f4>
 80031d2:	bf00      	nop
 80031d4:	f3af 8000 	nop.w
	...
 80031e4:	3ff00000 	.word	0x3ff00000
 80031e8:	08003bb8 	.word	0x08003bb8
 80031ec:	40200000 	.word	0x40200000
 80031f0:	3ff00000 	.word	0x3ff00000
 80031f4:	3e700000 	.word	0x3e700000
 80031f8:	41700000 	.word	0x41700000
 80031fc:	3fe00000 	.word	0x3fe00000
 8003200:	a90c      	add	r1, sp, #48	; 0x30
 8003202:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003206:	3b01      	subs	r3, #1
 8003208:	430a      	orrs	r2, r1
 800320a:	e799      	b.n	8003140 <__kernel_rem_pio2+0x278>
 800320c:	3401      	adds	r4, #1
 800320e:	e7a0      	b.n	8003152 <__kernel_rem_pio2+0x28a>
 8003210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003212:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003216:	f7fd f931 	bl	800047c <__aeabi_i2d>
 800321a:	e8e5 0102 	strd	r0, r1, [r5], #8
 800321e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003220:	9508      	str	r5, [sp, #32]
 8003222:	461c      	mov	r4, r3
 8003224:	2700      	movs	r7, #0
 8003226:	f04f 0800 	mov.w	r8, #0
 800322a:	f04f 0900 	mov.w	r9, #0
 800322e:	9b04      	ldr	r3, [sp, #16]
 8003230:	429f      	cmp	r7, r3
 8003232:	dd03      	ble.n	800323c <__kernel_rem_pio2+0x374>
 8003234:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003238:	3601      	adds	r6, #1
 800323a:	e79d      	b.n	8003178 <__kernel_rem_pio2+0x2b0>
 800323c:	9908      	ldr	r1, [sp, #32]
 800323e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003242:	9108      	str	r1, [sp, #32]
 8003244:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003248:	f7fd f97e 	bl	8000548 <__aeabi_dmul>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4640      	mov	r0, r8
 8003252:	4649      	mov	r1, r9
 8003254:	f7fc ffc6 	bl	80001e4 <__adddf3>
 8003258:	3701      	adds	r7, #1
 800325a:	4680      	mov	r8, r0
 800325c:	4689      	mov	r9, r1
 800325e:	e7e6      	b.n	800322e <__kernel_rem_pio2+0x366>
 8003260:	3c01      	subs	r4, #1
 8003262:	ab0c      	add	r3, sp, #48	; 0x30
 8003264:	f1aa 0a18 	sub.w	sl, sl, #24
 8003268:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f7      	beq.n	8003260 <__kernel_rem_pio2+0x398>
 8003270:	4650      	mov	r0, sl
 8003272:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8003548 <__kernel_rem_pio2+0x680>
 8003276:	f000 fabf 	bl	80037f8 <scalbn>
 800327a:	00e5      	lsls	r5, r4, #3
 800327c:	ab98      	add	r3, sp, #608	; 0x260
 800327e:	eb03 0905 	add.w	r9, r3, r5
 8003282:	ec57 6b10 	vmov	r6, r7, d0
 8003286:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800328a:	46a0      	mov	r8, r4
 800328c:	f1b8 0f00 	cmp.w	r8, #0
 8003290:	da4d      	bge.n	800332e <__kernel_rem_pio2+0x466>
 8003292:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8003550 <__kernel_rem_pio2+0x688>
 8003296:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800329a:	2300      	movs	r3, #0
 800329c:	9304      	str	r3, [sp, #16]
 800329e:	4657      	mov	r7, sl
 80032a0:	9b04      	ldr	r3, [sp, #16]
 80032a2:	ebb4 0903 	subs.w	r9, r4, r3
 80032a6:	d476      	bmi.n	8003396 <__kernel_rem_pio2+0x4ce>
 80032a8:	4bab      	ldr	r3, [pc, #684]	; (8003558 <__kernel_rem_pio2+0x690>)
 80032aa:	461e      	mov	r6, r3
 80032ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80032ae:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80032b2:	ed8d 8b06 	vstr	d8, [sp, #24]
 80032b6:	f04f 0800 	mov.w	r8, #0
 80032ba:	e05e      	b.n	800337a <__kernel_rem_pio2+0x4b2>
 80032bc:	f1ca 0000 	rsb	r0, sl, #0
 80032c0:	ec49 8b10 	vmov	d0, r8, r9
 80032c4:	f000 fa98 	bl	80037f8 <scalbn>
 80032c8:	ec55 4b10 	vmov	r4, r5, d0
 80032cc:	2200      	movs	r2, #0
 80032ce:	4ba3      	ldr	r3, [pc, #652]	; (800355c <__kernel_rem_pio2+0x694>)
 80032d0:	ee10 0a10 	vmov	r0, s0
 80032d4:	4629      	mov	r1, r5
 80032d6:	f7fd fbbd 	bl	8000a54 <__aeabi_dcmpge>
 80032da:	b1f8      	cbz	r0, 800331c <__kernel_rem_pio2+0x454>
 80032dc:	2200      	movs	r2, #0
 80032de:	4ba0      	ldr	r3, [pc, #640]	; (8003560 <__kernel_rem_pio2+0x698>)
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	f7fd f930 	bl	8000548 <__aeabi_dmul>
 80032e8:	f7fd fbc8 	bl	8000a7c <__aeabi_d2iz>
 80032ec:	4606      	mov	r6, r0
 80032ee:	f7fd f8c5 	bl	800047c <__aeabi_i2d>
 80032f2:	2200      	movs	r2, #0
 80032f4:	4b99      	ldr	r3, [pc, #612]	; (800355c <__kernel_rem_pio2+0x694>)
 80032f6:	f7fd f927 	bl	8000548 <__aeabi_dmul>
 80032fa:	460b      	mov	r3, r1
 80032fc:	4602      	mov	r2, r0
 80032fe:	4629      	mov	r1, r5
 8003300:	4620      	mov	r0, r4
 8003302:	f7fc ff6d 	bl	80001e0 <__aeabi_dsub>
 8003306:	f7fd fbb9 	bl	8000a7c <__aeabi_d2iz>
 800330a:	1c7c      	adds	r4, r7, #1
 800330c:	ab0c      	add	r3, sp, #48	; 0x30
 800330e:	f10a 0a18 	add.w	sl, sl, #24
 8003312:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003316:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800331a:	e7a9      	b.n	8003270 <__kernel_rem_pio2+0x3a8>
 800331c:	4620      	mov	r0, r4
 800331e:	4629      	mov	r1, r5
 8003320:	f7fd fbac 	bl	8000a7c <__aeabi_d2iz>
 8003324:	ab0c      	add	r3, sp, #48	; 0x30
 8003326:	463c      	mov	r4, r7
 8003328:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800332c:	e7a0      	b.n	8003270 <__kernel_rem_pio2+0x3a8>
 800332e:	ab0c      	add	r3, sp, #48	; 0x30
 8003330:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003334:	f7fd f8a2 	bl	800047c <__aeabi_i2d>
 8003338:	4632      	mov	r2, r6
 800333a:	463b      	mov	r3, r7
 800333c:	f7fd f904 	bl	8000548 <__aeabi_dmul>
 8003340:	2200      	movs	r2, #0
 8003342:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8003346:	4b86      	ldr	r3, [pc, #536]	; (8003560 <__kernel_rem_pio2+0x698>)
 8003348:	4630      	mov	r0, r6
 800334a:	4639      	mov	r1, r7
 800334c:	f7fd f8fc 	bl	8000548 <__aeabi_dmul>
 8003350:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003354:	4606      	mov	r6, r0
 8003356:	460f      	mov	r7, r1
 8003358:	e798      	b.n	800328c <__kernel_rem_pio2+0x3c4>
 800335a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800335e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8003362:	f7fd f8f1 	bl	8000548 <__aeabi_dmul>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800336e:	f7fc ff39 	bl	80001e4 <__adddf3>
 8003372:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003376:	f108 0801 	add.w	r8, r8, #1
 800337a:	9b00      	ldr	r3, [sp, #0]
 800337c:	4598      	cmp	r8, r3
 800337e:	dc02      	bgt.n	8003386 <__kernel_rem_pio2+0x4be>
 8003380:	9b04      	ldr	r3, [sp, #16]
 8003382:	4598      	cmp	r8, r3
 8003384:	dde9      	ble.n	800335a <__kernel_rem_pio2+0x492>
 8003386:	9b04      	ldr	r3, [sp, #16]
 8003388:	ed9d 7b06 	vldr	d7, [sp, #24]
 800338c:	3301      	adds	r3, #1
 800338e:	ecaa 7b02 	vstmia	sl!, {d7}
 8003392:	9304      	str	r3, [sp, #16]
 8003394:	e784      	b.n	80032a0 <__kernel_rem_pio2+0x3d8>
 8003396:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003398:	2b03      	cmp	r3, #3
 800339a:	d85d      	bhi.n	8003458 <__kernel_rem_pio2+0x590>
 800339c:	e8df f003 	tbb	[pc, r3]
 80033a0:	0226264b 	.word	0x0226264b
 80033a4:	ab98      	add	r3, sp, #608	; 0x260
 80033a6:	441d      	add	r5, r3
 80033a8:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80033ac:	462e      	mov	r6, r5
 80033ae:	46a2      	mov	sl, r4
 80033b0:	f1ba 0f00 	cmp.w	sl, #0
 80033b4:	dc6e      	bgt.n	8003494 <__kernel_rem_pio2+0x5cc>
 80033b6:	462e      	mov	r6, r5
 80033b8:	46a2      	mov	sl, r4
 80033ba:	f1ba 0f01 	cmp.w	sl, #1
 80033be:	f300 808a 	bgt.w	80034d6 <__kernel_rem_pio2+0x60e>
 80033c2:	2000      	movs	r0, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	2c01      	cmp	r4, #1
 80033c8:	f300 80a6 	bgt.w	8003518 <__kernel_rem_pio2+0x650>
 80033cc:	f1bb 0f00 	cmp.w	fp, #0
 80033d0:	f040 80a8 	bne.w	8003524 <__kernel_rem_pio2+0x65c>
 80033d4:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80033d8:	9c02      	ldr	r4, [sp, #8]
 80033da:	e9c4 2300 	strd	r2, r3, [r4]
 80033de:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80033e2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80033e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80033ea:	e035      	b.n	8003458 <__kernel_rem_pio2+0x590>
 80033ec:	3508      	adds	r5, #8
 80033ee:	ab48      	add	r3, sp, #288	; 0x120
 80033f0:	441d      	add	r5, r3
 80033f2:	4626      	mov	r6, r4
 80033f4:	2000      	movs	r0, #0
 80033f6:	2100      	movs	r1, #0
 80033f8:	2e00      	cmp	r6, #0
 80033fa:	da3c      	bge.n	8003476 <__kernel_rem_pio2+0x5ae>
 80033fc:	f1bb 0f00 	cmp.w	fp, #0
 8003400:	d03f      	beq.n	8003482 <__kernel_rem_pio2+0x5ba>
 8003402:	4602      	mov	r2, r0
 8003404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003408:	9d02      	ldr	r5, [sp, #8]
 800340a:	e9c5 2300 	strd	r2, r3, [r5]
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003416:	f7fc fee3 	bl	80001e0 <__aeabi_dsub>
 800341a:	ae4a      	add	r6, sp, #296	; 0x128
 800341c:	2501      	movs	r5, #1
 800341e:	42ac      	cmp	r4, r5
 8003420:	da32      	bge.n	8003488 <__kernel_rem_pio2+0x5c0>
 8003422:	f1bb 0f00 	cmp.w	fp, #0
 8003426:	d002      	beq.n	800342e <__kernel_rem_pio2+0x566>
 8003428:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800342c:	4619      	mov	r1, r3
 800342e:	9b02      	ldr	r3, [sp, #8]
 8003430:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003434:	e010      	b.n	8003458 <__kernel_rem_pio2+0x590>
 8003436:	ab98      	add	r3, sp, #608	; 0x260
 8003438:	441d      	add	r5, r3
 800343a:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800343e:	2000      	movs	r0, #0
 8003440:	2100      	movs	r1, #0
 8003442:	2c00      	cmp	r4, #0
 8003444:	da11      	bge.n	800346a <__kernel_rem_pio2+0x5a2>
 8003446:	f1bb 0f00 	cmp.w	fp, #0
 800344a:	d002      	beq.n	8003452 <__kernel_rem_pio2+0x58a>
 800344c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003450:	4619      	mov	r1, r3
 8003452:	9b02      	ldr	r3, [sp, #8]
 8003454:	e9c3 0100 	strd	r0, r1, [r3]
 8003458:	9b03      	ldr	r3, [sp, #12]
 800345a:	f003 0007 	and.w	r0, r3, #7
 800345e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003462:	ecbd 8b02 	vpop	{d8}
 8003466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800346a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800346e:	f7fc feb9 	bl	80001e4 <__adddf3>
 8003472:	3c01      	subs	r4, #1
 8003474:	e7e5      	b.n	8003442 <__kernel_rem_pio2+0x57a>
 8003476:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800347a:	f7fc feb3 	bl	80001e4 <__adddf3>
 800347e:	3e01      	subs	r6, #1
 8003480:	e7ba      	b.n	80033f8 <__kernel_rem_pio2+0x530>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	e7bf      	b.n	8003408 <__kernel_rem_pio2+0x540>
 8003488:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800348c:	f7fc feaa 	bl	80001e4 <__adddf3>
 8003490:	3501      	adds	r5, #1
 8003492:	e7c4      	b.n	800341e <__kernel_rem_pio2+0x556>
 8003494:	ed16 7b02 	vldr	d7, [r6, #-8]
 8003498:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800349c:	ec53 2b17 	vmov	r2, r3, d7
 80034a0:	4640      	mov	r0, r8
 80034a2:	4649      	mov	r1, r9
 80034a4:	ed8d 7b00 	vstr	d7, [sp]
 80034a8:	f7fc fe9c 	bl	80001e4 <__adddf3>
 80034ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4640      	mov	r0, r8
 80034b6:	4649      	mov	r1, r9
 80034b8:	f7fc fe92 	bl	80001e0 <__aeabi_dsub>
 80034bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034c0:	f7fc fe90 	bl	80001e4 <__adddf3>
 80034c4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80034c8:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80034cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80034d0:	ed06 7b02 	vstr	d7, [r6, #-8]
 80034d4:	e76c      	b.n	80033b0 <__kernel_rem_pio2+0x4e8>
 80034d6:	ed16 7b02 	vldr	d7, [r6, #-8]
 80034da:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80034de:	ec53 2b17 	vmov	r2, r3, d7
 80034e2:	4640      	mov	r0, r8
 80034e4:	4649      	mov	r1, r9
 80034e6:	ed8d 7b00 	vstr	d7, [sp]
 80034ea:	f7fc fe7b 	bl	80001e4 <__adddf3>
 80034ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4640      	mov	r0, r8
 80034f8:	4649      	mov	r1, r9
 80034fa:	f7fc fe71 	bl	80001e0 <__aeabi_dsub>
 80034fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003502:	f7fc fe6f 	bl	80001e4 <__adddf3>
 8003506:	ed9d 7b04 	vldr	d7, [sp, #16]
 800350a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800350e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003512:	ed06 7b02 	vstr	d7, [r6, #-8]
 8003516:	e750      	b.n	80033ba <__kernel_rem_pio2+0x4f2>
 8003518:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800351c:	f7fc fe62 	bl	80001e4 <__adddf3>
 8003520:	3c01      	subs	r4, #1
 8003522:	e750      	b.n	80033c6 <__kernel_rem_pio2+0x4fe>
 8003524:	9a02      	ldr	r2, [sp, #8]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6110      	str	r0, [r2, #16]
 800352e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003532:	6053      	str	r3, [r2, #4]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6093      	str	r3, [r2, #8]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800353e:	60d3      	str	r3, [r2, #12]
 8003540:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003544:	6153      	str	r3, [r2, #20]
 8003546:	e787      	b.n	8003458 <__kernel_rem_pio2+0x590>
 8003548:	00000000 	.word	0x00000000
 800354c:	3ff00000 	.word	0x3ff00000
	...
 8003558:	08003b78 	.word	0x08003b78
 800355c:	41700000 	.word	0x41700000
 8003560:	3e700000 	.word	0x3e700000
 8003564:	00000000 	.word	0x00000000

08003568 <__kernel_sin>:
 8003568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800356c:	ec55 4b10 	vmov	r4, r5, d0
 8003570:	b085      	sub	sp, #20
 8003572:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003576:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800357a:	ed8d 1b00 	vstr	d1, [sp]
 800357e:	9002      	str	r0, [sp, #8]
 8003580:	da06      	bge.n	8003590 <__kernel_sin+0x28>
 8003582:	ee10 0a10 	vmov	r0, s0
 8003586:	4629      	mov	r1, r5
 8003588:	f7fd fa78 	bl	8000a7c <__aeabi_d2iz>
 800358c:	2800      	cmp	r0, #0
 800358e:	d051      	beq.n	8003634 <__kernel_sin+0xcc>
 8003590:	4622      	mov	r2, r4
 8003592:	462b      	mov	r3, r5
 8003594:	4620      	mov	r0, r4
 8003596:	4629      	mov	r1, r5
 8003598:	f7fc ffd6 	bl	8000548 <__aeabi_dmul>
 800359c:	4682      	mov	sl, r0
 800359e:	468b      	mov	fp, r1
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4620      	mov	r0, r4
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fc ffce 	bl	8000548 <__aeabi_dmul>
 80035ac:	a341      	add	r3, pc, #260	; (adr r3, 80036b4 <__kernel_sin+0x14c>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	4680      	mov	r8, r0
 80035b4:	4689      	mov	r9, r1
 80035b6:	4650      	mov	r0, sl
 80035b8:	4659      	mov	r1, fp
 80035ba:	f7fc ffc5 	bl	8000548 <__aeabi_dmul>
 80035be:	a33f      	add	r3, pc, #252	; (adr r3, 80036bc <__kernel_sin+0x154>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fc fe0c 	bl	80001e0 <__aeabi_dsub>
 80035c8:	4652      	mov	r2, sl
 80035ca:	465b      	mov	r3, fp
 80035cc:	f7fc ffbc 	bl	8000548 <__aeabi_dmul>
 80035d0:	a33c      	add	r3, pc, #240	; (adr r3, 80036c4 <__kernel_sin+0x15c>)
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f7fc fe05 	bl	80001e4 <__adddf3>
 80035da:	4652      	mov	r2, sl
 80035dc:	465b      	mov	r3, fp
 80035de:	f7fc ffb3 	bl	8000548 <__aeabi_dmul>
 80035e2:	a33a      	add	r3, pc, #232	; (adr r3, 80036cc <__kernel_sin+0x164>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f7fc fdfa 	bl	80001e0 <__aeabi_dsub>
 80035ec:	4652      	mov	r2, sl
 80035ee:	465b      	mov	r3, fp
 80035f0:	f7fc ffaa 	bl	8000548 <__aeabi_dmul>
 80035f4:	a337      	add	r3, pc, #220	; (adr r3, 80036d4 <__kernel_sin+0x16c>)
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f7fc fdf3 	bl	80001e4 <__adddf3>
 80035fe:	9b02      	ldr	r3, [sp, #8]
 8003600:	4606      	mov	r6, r0
 8003602:	460f      	mov	r7, r1
 8003604:	b9db      	cbnz	r3, 800363e <__kernel_sin+0xd6>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4650      	mov	r0, sl
 800360c:	4659      	mov	r1, fp
 800360e:	f7fc ff9b 	bl	8000548 <__aeabi_dmul>
 8003612:	a325      	add	r3, pc, #148	; (adr r3, 80036a8 <__kernel_sin+0x140>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fc fde2 	bl	80001e0 <__aeabi_dsub>
 800361c:	4642      	mov	r2, r8
 800361e:	464b      	mov	r3, r9
 8003620:	f7fc ff92 	bl	8000548 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4620      	mov	r0, r4
 800362a:	4629      	mov	r1, r5
 800362c:	f7fc fdda 	bl	80001e4 <__adddf3>
 8003630:	4604      	mov	r4, r0
 8003632:	460d      	mov	r5, r1
 8003634:	ec45 4b10 	vmov	d0, r4, r5
 8003638:	b005      	add	sp, #20
 800363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363e:	2200      	movs	r2, #0
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <__kernel_sin+0x148>)
 8003642:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003646:	f7fc ff7f 	bl	8000548 <__aeabi_dmul>
 800364a:	4632      	mov	r2, r6
 800364c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003650:	463b      	mov	r3, r7
 8003652:	4640      	mov	r0, r8
 8003654:	4649      	mov	r1, r9
 8003656:	f7fc ff77 	bl	8000548 <__aeabi_dmul>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003662:	f7fc fdbd 	bl	80001e0 <__aeabi_dsub>
 8003666:	4652      	mov	r2, sl
 8003668:	465b      	mov	r3, fp
 800366a:	f7fc ff6d 	bl	8000548 <__aeabi_dmul>
 800366e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003672:	f7fc fdb5 	bl	80001e0 <__aeabi_dsub>
 8003676:	a30c      	add	r3, pc, #48	; (adr r3, 80036a8 <__kernel_sin+0x140>)
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	4606      	mov	r6, r0
 800367e:	460f      	mov	r7, r1
 8003680:	4640      	mov	r0, r8
 8003682:	4649      	mov	r1, r9
 8003684:	f7fc ff60 	bl	8000548 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4630      	mov	r0, r6
 800368e:	4639      	mov	r1, r7
 8003690:	f7fc fda8 	bl	80001e4 <__adddf3>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f7fc fda0 	bl	80001e0 <__aeabi_dsub>
 80036a0:	e7c6      	b.n	8003630 <__kernel_sin+0xc8>
 80036a2:	bf00      	nop
 80036a4:	f3af 8000 	nop.w
 80036a8:	55555549 	.word	0x55555549
 80036ac:	3fc55555 	.word	0x3fc55555
 80036b0:	3fe00000 	.word	0x3fe00000
 80036b4:	5acfd57c 	.word	0x5acfd57c
 80036b8:	3de5d93a 	.word	0x3de5d93a
 80036bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80036c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80036c4:	57b1fe7d 	.word	0x57b1fe7d
 80036c8:	3ec71de3 	.word	0x3ec71de3
 80036cc:	19c161d5 	.word	0x19c161d5
 80036d0:	3f2a01a0 	.word	0x3f2a01a0
 80036d4:	1110f8a6 	.word	0x1110f8a6
 80036d8:	3f811111 	.word	0x3f811111

080036dc <fabs>:
 80036dc:	ec53 2b10 	vmov	r2, r3, d0
 80036e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036e4:	ec43 2b10 	vmov	d0, r2, r3
 80036e8:	4770      	bx	lr
 80036ea:	0000      	movs	r0, r0
 80036ec:	0000      	movs	r0, r0
	...

080036f0 <floor>:
 80036f0:	ec51 0b10 	vmov	r0, r1, d0
 80036f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80036fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003700:	2e13      	cmp	r6, #19
 8003702:	ee10 8a10 	vmov	r8, s0
 8003706:	460c      	mov	r4, r1
 8003708:	ee10 5a10 	vmov	r5, s0
 800370c:	dc35      	bgt.n	800377a <floor+0x8a>
 800370e:	2e00      	cmp	r6, #0
 8003710:	da17      	bge.n	8003742 <floor+0x52>
 8003712:	a335      	add	r3, pc, #212	; (adr r3, 80037e8 <floor+0xf8>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f7fc fd64 	bl	80001e4 <__adddf3>
 800371c:	2200      	movs	r2, #0
 800371e:	2300      	movs	r3, #0
 8003720:	f7fd f9a2 	bl	8000a68 <__aeabi_dcmpgt>
 8003724:	b150      	cbz	r0, 800373c <floor+0x4c>
 8003726:	2c00      	cmp	r4, #0
 8003728:	da5a      	bge.n	80037e0 <floor+0xf0>
 800372a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800372e:	ea53 0308 	orrs.w	r3, r3, r8
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <floor+0x100>)
 8003734:	f04f 0500 	mov.w	r5, #0
 8003738:	bf18      	it	ne
 800373a:	461c      	movne	r4, r3
 800373c:	4621      	mov	r1, r4
 800373e:	4628      	mov	r0, r5
 8003740:	e025      	b.n	800378e <floor+0x9e>
 8003742:	4f2c      	ldr	r7, [pc, #176]	; (80037f4 <floor+0x104>)
 8003744:	4137      	asrs	r7, r6
 8003746:	ea01 0307 	and.w	r3, r1, r7
 800374a:	4303      	orrs	r3, r0
 800374c:	d01f      	beq.n	800378e <floor+0x9e>
 800374e:	a326      	add	r3, pc, #152	; (adr r3, 80037e8 <floor+0xf8>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f7fc fd46 	bl	80001e4 <__adddf3>
 8003758:	2200      	movs	r2, #0
 800375a:	2300      	movs	r3, #0
 800375c:	f7fd f984 	bl	8000a68 <__aeabi_dcmpgt>
 8003760:	2800      	cmp	r0, #0
 8003762:	d0eb      	beq.n	800373c <floor+0x4c>
 8003764:	2c00      	cmp	r4, #0
 8003766:	bfbe      	ittt	lt
 8003768:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800376c:	fa43 f606 	asrlt.w	r6, r3, r6
 8003770:	19a4      	addlt	r4, r4, r6
 8003772:	ea24 0407 	bic.w	r4, r4, r7
 8003776:	2500      	movs	r5, #0
 8003778:	e7e0      	b.n	800373c <floor+0x4c>
 800377a:	2e33      	cmp	r6, #51	; 0x33
 800377c:	dd0b      	ble.n	8003796 <floor+0xa6>
 800377e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003782:	d104      	bne.n	800378e <floor+0x9e>
 8003784:	ee10 2a10 	vmov	r2, s0
 8003788:	460b      	mov	r3, r1
 800378a:	f7fc fd2b 	bl	80001e4 <__adddf3>
 800378e:	ec41 0b10 	vmov	d0, r0, r1
 8003792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003796:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800379a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800379e:	fa23 f707 	lsr.w	r7, r3, r7
 80037a2:	4238      	tst	r0, r7
 80037a4:	d0f3      	beq.n	800378e <floor+0x9e>
 80037a6:	a310      	add	r3, pc, #64	; (adr r3, 80037e8 <floor+0xf8>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f7fc fd1a 	bl	80001e4 <__adddf3>
 80037b0:	2200      	movs	r2, #0
 80037b2:	2300      	movs	r3, #0
 80037b4:	f7fd f958 	bl	8000a68 <__aeabi_dcmpgt>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	d0bf      	beq.n	800373c <floor+0x4c>
 80037bc:	2c00      	cmp	r4, #0
 80037be:	da02      	bge.n	80037c6 <floor+0xd6>
 80037c0:	2e14      	cmp	r6, #20
 80037c2:	d103      	bne.n	80037cc <floor+0xdc>
 80037c4:	3401      	adds	r4, #1
 80037c6:	ea25 0507 	bic.w	r5, r5, r7
 80037ca:	e7b7      	b.n	800373c <floor+0x4c>
 80037cc:	2301      	movs	r3, #1
 80037ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80037d2:	fa03 f606 	lsl.w	r6, r3, r6
 80037d6:	4435      	add	r5, r6
 80037d8:	45a8      	cmp	r8, r5
 80037da:	bf88      	it	hi
 80037dc:	18e4      	addhi	r4, r4, r3
 80037de:	e7f2      	b.n	80037c6 <floor+0xd6>
 80037e0:	2500      	movs	r5, #0
 80037e2:	462c      	mov	r4, r5
 80037e4:	e7aa      	b.n	800373c <floor+0x4c>
 80037e6:	bf00      	nop
 80037e8:	8800759c 	.word	0x8800759c
 80037ec:	7e37e43c 	.word	0x7e37e43c
 80037f0:	bff00000 	.word	0xbff00000
 80037f4:	000fffff 	.word	0x000fffff

080037f8 <scalbn>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	ec55 4b10 	vmov	r4, r5, d0
 80037fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003802:	4606      	mov	r6, r0
 8003804:	462b      	mov	r3, r5
 8003806:	b9b2      	cbnz	r2, 8003836 <scalbn+0x3e>
 8003808:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800380c:	4323      	orrs	r3, r4
 800380e:	d03c      	beq.n	800388a <scalbn+0x92>
 8003810:	2200      	movs	r2, #0
 8003812:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <scalbn+0xe8>)
 8003814:	4629      	mov	r1, r5
 8003816:	ee10 0a10 	vmov	r0, s0
 800381a:	f7fc fe95 	bl	8000548 <__aeabi_dmul>
 800381e:	4a31      	ldr	r2, [pc, #196]	; (80038e4 <scalbn+0xec>)
 8003820:	4296      	cmp	r6, r2
 8003822:	4604      	mov	r4, r0
 8003824:	460d      	mov	r5, r1
 8003826:	460b      	mov	r3, r1
 8003828:	da13      	bge.n	8003852 <scalbn+0x5a>
 800382a:	a329      	add	r3, pc, #164	; (adr r3, 80038d0 <scalbn+0xd8>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f7fc fe8a 	bl	8000548 <__aeabi_dmul>
 8003834:	e00a      	b.n	800384c <scalbn+0x54>
 8003836:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800383a:	428a      	cmp	r2, r1
 800383c:	d10c      	bne.n	8003858 <scalbn+0x60>
 800383e:	ee10 2a10 	vmov	r2, s0
 8003842:	462b      	mov	r3, r5
 8003844:	4620      	mov	r0, r4
 8003846:	4629      	mov	r1, r5
 8003848:	f7fc fccc 	bl	80001e4 <__adddf3>
 800384c:	4604      	mov	r4, r0
 800384e:	460d      	mov	r5, r1
 8003850:	e01b      	b.n	800388a <scalbn+0x92>
 8003852:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003856:	3a36      	subs	r2, #54	; 0x36
 8003858:	4432      	add	r2, r6
 800385a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800385e:	428a      	cmp	r2, r1
 8003860:	dd0b      	ble.n	800387a <scalbn+0x82>
 8003862:	ec45 4b11 	vmov	d1, r4, r5
 8003866:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80038d8 <scalbn+0xe0>
 800386a:	f000 f83f 	bl	80038ec <copysign>
 800386e:	a31a      	add	r3, pc, #104	; (adr r3, 80038d8 <scalbn+0xe0>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	ec51 0b10 	vmov	r0, r1, d0
 8003878:	e7da      	b.n	8003830 <scalbn+0x38>
 800387a:	2a00      	cmp	r2, #0
 800387c:	dd08      	ble.n	8003890 <scalbn+0x98>
 800387e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003882:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003886:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800388a:	ec45 4b10 	vmov	d0, r4, r5
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003894:	da0d      	bge.n	80038b2 <scalbn+0xba>
 8003896:	f24c 3350 	movw	r3, #50000	; 0xc350
 800389a:	429e      	cmp	r6, r3
 800389c:	ec45 4b11 	vmov	d1, r4, r5
 80038a0:	dce1      	bgt.n	8003866 <scalbn+0x6e>
 80038a2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80038d0 <scalbn+0xd8>
 80038a6:	f000 f821 	bl	80038ec <copysign>
 80038aa:	a309      	add	r3, pc, #36	; (adr r3, 80038d0 <scalbn+0xd8>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	e7e0      	b.n	8003874 <scalbn+0x7c>
 80038b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80038b6:	3236      	adds	r2, #54	; 0x36
 80038b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80038bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80038c0:	4620      	mov	r0, r4
 80038c2:	4629      	mov	r1, r5
 80038c4:	2200      	movs	r2, #0
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <scalbn+0xf0>)
 80038c8:	e7b2      	b.n	8003830 <scalbn+0x38>
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w
 80038d0:	c2f8f359 	.word	0xc2f8f359
 80038d4:	01a56e1f 	.word	0x01a56e1f
 80038d8:	8800759c 	.word	0x8800759c
 80038dc:	7e37e43c 	.word	0x7e37e43c
 80038e0:	43500000 	.word	0x43500000
 80038e4:	ffff3cb0 	.word	0xffff3cb0
 80038e8:	3c900000 	.word	0x3c900000

080038ec <copysign>:
 80038ec:	ec53 2b10 	vmov	r2, r3, d0
 80038f0:	ee11 0a90 	vmov	r0, s3
 80038f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80038fc:	ea41 0300 	orr.w	r3, r1, r0
 8003900:	ec43 2b10 	vmov	d0, r2, r3
 8003904:	4770      	bx	lr
	...

08003908 <_getpid>:
 8003908:	4b02      	ldr	r3, [pc, #8]	; (8003914 <_getpid+0xc>)
 800390a:	2258      	movs	r2, #88	; 0x58
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003912:	4770      	bx	lr
 8003914:	20001180 	.word	0x20001180

08003918 <_kill>:
 8003918:	4b02      	ldr	r3, [pc, #8]	; (8003924 <_kill+0xc>)
 800391a:	2258      	movs	r2, #88	; 0x58
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003922:	4770      	bx	lr
 8003924:	20001180 	.word	0x20001180

08003928 <_write>:
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <_write+0xc>)
 800392a:	2258      	movs	r2, #88	; 0x58
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003932:	4770      	bx	lr
 8003934:	20001180 	.word	0x20001180

08003938 <_exit>:
 8003938:	e7fe      	b.n	8003938 <_exit>
	...

0800393c <_init>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	bf00      	nop
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr

08003948 <_fini>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	bf00      	nop
 800394c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394e:	bc08      	pop	{r3}
 8003950:	469e      	mov	lr, r3
 8003952:	4770      	bx	lr
